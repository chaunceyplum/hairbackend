
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Transaction
 * 
 */
export type Transaction = {
  transactionId: string
  fbarberId: string
  fcustomerId: string
  dateOfOrder: Date
  orderPrice: number
}

/**
 * Model Barber
 * 
 */
export type Barber = {
  barberId: string
  firstName: string
}

/**
 * Model Customer
 * 
 */
export type Customer = {
  customerId: string
  firstName: string
  lastName: string
  city: string
  phoneNumber: number
  ffavoriteBarber: string
}

/**
 * Model Appointment
 * 
 */
export type Appointment = {
  appointmentDate: Date
  Date: Date
  fcustomerId: string
  fbarberId: string
  appointmentId: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Transactions
 * const transactions = await prisma.transaction.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Transactions
   * const transactions = await prisma.transaction.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transaction.findMany()
    * ```
    */
  get transaction(): Prisma.TransactionDelegate<GlobalReject>;

  /**
   * `prisma.barber`: Exposes CRUD operations for the **Barber** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Barbers
    * const barbers = await prisma.barber.findMany()
    * ```
    */
  get barber(): Prisma.BarberDelegate<GlobalReject>;

  /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<GlobalReject>;

  /**
   * `prisma.appointment`: Exposes CRUD operations for the **Appointment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Appointments
    * const appointments = await prisma.appointment.findMany()
    * ```
    */
  get appointment(): Prisma.AppointmentDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.11.0
   * Query Engine version: 8fde8fef4033376662cad983758335009d522acb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Transaction: 'Transaction',
    Barber: 'Barber',
    Customer: 'Customer',
    Appointment: 'Appointment'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type BarberCountOutputType
   */


  export type BarberCountOutputType = {
    Transaction: number
    Customer: number
    Appointment: number
  }

  export type BarberCountOutputTypeSelect = {
    Transaction?: boolean
    Customer?: boolean
    Appointment?: boolean
  }

  export type BarberCountOutputTypeGetPayload<S extends boolean | null | undefined | BarberCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BarberCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (BarberCountOutputTypeArgs)
    ? BarberCountOutputType 
    : S extends { select: any } & (BarberCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof BarberCountOutputType ? BarberCountOutputType[P] : never
  } 
      : BarberCountOutputType




  // Custom InputTypes

  /**
   * BarberCountOutputType without action
   */
  export type BarberCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the BarberCountOutputType
     */
    select?: BarberCountOutputTypeSelect | null
  }



  /**
   * Count Type CustomerCountOutputType
   */


  export type CustomerCountOutputType = {
    Transaction: number
    Appointment: number
  }

  export type CustomerCountOutputTypeSelect = {
    Transaction?: boolean
    Appointment?: boolean
  }

  export type CustomerCountOutputTypeGetPayload<S extends boolean | null | undefined | CustomerCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CustomerCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CustomerCountOutputTypeArgs)
    ? CustomerCountOutputType 
    : S extends { select: any } & (CustomerCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CustomerCountOutputType ? CustomerCountOutputType[P] : never
  } 
      : CustomerCountOutputType




  // Custom InputTypes

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CustomerCountOutputType
     */
    select?: CustomerCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Transaction
   */


  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionAvgAggregateOutputType = {
    orderPrice: number | null
  }

  export type TransactionSumAggregateOutputType = {
    orderPrice: number | null
  }

  export type TransactionMinAggregateOutputType = {
    transactionId: string | null
    fbarberId: string | null
    fcustomerId: string | null
    dateOfOrder: Date | null
    orderPrice: number | null
  }

  export type TransactionMaxAggregateOutputType = {
    transactionId: string | null
    fbarberId: string | null
    fcustomerId: string | null
    dateOfOrder: Date | null
    orderPrice: number | null
  }

  export type TransactionCountAggregateOutputType = {
    transactionId: number
    fbarberId: number
    fcustomerId: number
    dateOfOrder: number
    orderPrice: number
    _all: number
  }


  export type TransactionAvgAggregateInputType = {
    orderPrice?: true
  }

  export type TransactionSumAggregateInputType = {
    orderPrice?: true
  }

  export type TransactionMinAggregateInputType = {
    transactionId?: true
    fbarberId?: true
    fcustomerId?: true
    dateOfOrder?: true
    orderPrice?: true
  }

  export type TransactionMaxAggregateInputType = {
    transactionId?: true
    fbarberId?: true
    fcustomerId?: true
    dateOfOrder?: true
    orderPrice?: true
  }

  export type TransactionCountAggregateInputType = {
    transactionId?: true
    fbarberId?: true
    fcustomerId?: true
    dateOfOrder?: true
    orderPrice?: true
    _all?: true
  }

  export type TransactionAggregateArgs = {
    /**
     * Filter which Transaction to aggregate.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: Enumerable<TransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs = {
    where?: TransactionWhereInput
    orderBy?: Enumerable<TransactionOrderByWithAggregationInput>
    by: TransactionScalarFieldEnum[]
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _avg?: TransactionAvgAggregateInputType
    _sum?: TransactionSumAggregateInputType
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }


  export type TransactionGroupByOutputType = {
    transactionId: string
    fbarberId: string
    fcustomerId: string
    dateOfOrder: Date
    orderPrice: number
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect = {
    transactionId?: boolean
    fbarberId?: boolean
    fcustomerId?: boolean
    dateOfOrder?: boolean
    orderPrice?: boolean
    barber?: boolean | BarberArgs
    customer?: boolean | CustomerArgs
  }


  export type TransactionInclude = {
    barber?: boolean | BarberArgs
    customer?: boolean | CustomerArgs
  }

  export type TransactionGetPayload<S extends boolean | null | undefined | TransactionArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Transaction :
    S extends undefined ? never :
    S extends { include: any } & (TransactionArgs | TransactionFindManyArgs)
    ? Transaction  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'barber' ? BarberGetPayload<S['include'][P]> :
        P extends 'customer' ? CustomerGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TransactionArgs | TransactionFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'barber' ? BarberGetPayload<S['select'][P]> :
        P extends 'customer' ? CustomerGetPayload<S['select'][P]> :  P extends keyof Transaction ? Transaction[P] : never
  } 
      : Transaction


  type TransactionCountArgs = 
    Omit<TransactionFindManyArgs, 'select' | 'include'> & {
      select?: TransactionCountAggregateInputType | true
    }

  export interface TransactionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TransactionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TransactionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Transaction'> extends True ? Prisma__TransactionClient<TransactionGetPayload<T>> : Prisma__TransactionClient<TransactionGetPayload<T> | null, null>

    /**
     * Find one Transaction that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TransactionFindUniqueOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TransactionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TransactionFindUniqueOrThrowArgs>
    ): Prisma__TransactionClient<TransactionGetPayload<T>>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TransactionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TransactionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Transaction'> extends True ? Prisma__TransactionClient<TransactionGetPayload<T>> : Prisma__TransactionClient<TransactionGetPayload<T> | null, null>

    /**
     * Find the first Transaction that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TransactionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TransactionFindFirstOrThrowArgs>
    ): Prisma__TransactionClient<TransactionGetPayload<T>>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `transactionId`
     * const transactionWithTransactionIdOnly = await prisma.transaction.findMany({ select: { transactionId: true } })
     * 
    **/
    findMany<T extends TransactionFindManyArgs>(
      args?: SelectSubset<T, TransactionFindManyArgs>
    ): Prisma.PrismaPromise<Array<TransactionGetPayload<T>>>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
    **/
    create<T extends TransactionCreateArgs>(
      args: SelectSubset<T, TransactionCreateArgs>
    ): Prisma__TransactionClient<TransactionGetPayload<T>>

    /**
     * Create many Transactions.
     *     @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     *     @example
     *     // Create many Transactions
     *     const transaction = await prisma.transaction.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TransactionCreateManyArgs>(
      args?: SelectSubset<T, TransactionCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
    **/
    delete<T extends TransactionDeleteArgs>(
      args: SelectSubset<T, TransactionDeleteArgs>
    ): Prisma__TransactionClient<TransactionGetPayload<T>>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TransactionUpdateArgs>(
      args: SelectSubset<T, TransactionUpdateArgs>
    ): Prisma__TransactionClient<TransactionGetPayload<T>>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TransactionDeleteManyArgs>(
      args?: SelectSubset<T, TransactionDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TransactionUpdateManyArgs>(
      args: SelectSubset<T, TransactionUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
    **/
    upsert<T extends TransactionUpsertArgs>(
      args: SelectSubset<T, TransactionUpsertArgs>
    ): Prisma__TransactionClient<TransactionGetPayload<T>>

    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): Prisma.PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TransactionClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    barber<T extends BarberArgs= {}>(args?: Subset<T, BarberArgs>): Prisma__BarberClient<BarberGetPayload<T> | Null>;

    customer<T extends CustomerArgs= {}>(args?: Subset<T, CustomerArgs>): Prisma__CustomerClient<CustomerGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Transaction base type for findUnique actions
   */
  export type TransactionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findUnique
   */
  export interface TransactionFindUniqueArgs extends TransactionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Transaction findUniqueOrThrow
   */
  export type TransactionFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }


  /**
   * Transaction base type for findFirst actions
   */
  export type TransactionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: Enumerable<TransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: Enumerable<TransactionScalarFieldEnum>
  }

  /**
   * Transaction findFirst
   */
  export interface TransactionFindFirstArgs extends TransactionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Transaction findFirstOrThrow
   */
  export type TransactionFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: Enumerable<TransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: Enumerable<TransactionScalarFieldEnum>
  }


  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: Enumerable<TransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    distinct?: Enumerable<TransactionScalarFieldEnum>
  }


  /**
   * Transaction create
   */
  export type TransactionCreateArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude | null
    /**
     * The data needed to create a Transaction.
     */
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }


  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs = {
    /**
     * The data used to create many Transactions.
     */
    data: Enumerable<TransactionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Transaction update
   */
  export type TransactionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude | null
    /**
     * The data needed to update a Transaction.
     */
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     */
    where: TransactionWhereUniqueInput
  }


  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs = {
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
  }


  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     */
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     */
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }


  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude | null
    /**
     * Filter which Transaction to delete.
     */
    where: TransactionWhereUniqueInput
  }


  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs = {
    /**
     * Filter which Transactions to delete
     */
    where?: TransactionWhereInput
  }


  /**
   * Transaction without action
   */
  export type TransactionArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude | null
  }



  /**
   * Model Barber
   */


  export type AggregateBarber = {
    _count: BarberCountAggregateOutputType | null
    _min: BarberMinAggregateOutputType | null
    _max: BarberMaxAggregateOutputType | null
  }

  export type BarberMinAggregateOutputType = {
    barberId: string | null
    firstName: string | null
  }

  export type BarberMaxAggregateOutputType = {
    barberId: string | null
    firstName: string | null
  }

  export type BarberCountAggregateOutputType = {
    barberId: number
    firstName: number
    _all: number
  }


  export type BarberMinAggregateInputType = {
    barberId?: true
    firstName?: true
  }

  export type BarberMaxAggregateInputType = {
    barberId?: true
    firstName?: true
  }

  export type BarberCountAggregateInputType = {
    barberId?: true
    firstName?: true
    _all?: true
  }

  export type BarberAggregateArgs = {
    /**
     * Filter which Barber to aggregate.
     */
    where?: BarberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Barbers to fetch.
     */
    orderBy?: Enumerable<BarberOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BarberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Barbers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Barbers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Barbers
    **/
    _count?: true | BarberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BarberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BarberMaxAggregateInputType
  }

  export type GetBarberAggregateType<T extends BarberAggregateArgs> = {
        [P in keyof T & keyof AggregateBarber]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBarber[P]>
      : GetScalarType<T[P], AggregateBarber[P]>
  }




  export type BarberGroupByArgs = {
    where?: BarberWhereInput
    orderBy?: Enumerable<BarberOrderByWithAggregationInput>
    by: BarberScalarFieldEnum[]
    having?: BarberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BarberCountAggregateInputType | true
    _min?: BarberMinAggregateInputType
    _max?: BarberMaxAggregateInputType
  }


  export type BarberGroupByOutputType = {
    barberId: string
    firstName: string
    _count: BarberCountAggregateOutputType | null
    _min: BarberMinAggregateOutputType | null
    _max: BarberMaxAggregateOutputType | null
  }

  type GetBarberGroupByPayload<T extends BarberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BarberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BarberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BarberGroupByOutputType[P]>
            : GetScalarType<T[P], BarberGroupByOutputType[P]>
        }
      >
    >


  export type BarberSelect = {
    barberId?: boolean
    firstName?: boolean
    Transaction?: boolean | Barber$TransactionArgs
    Customer?: boolean | Barber$CustomerArgs
    Appointment?: boolean | Barber$AppointmentArgs
    _count?: boolean | BarberCountOutputTypeArgs
  }


  export type BarberInclude = {
    Transaction?: boolean | Barber$TransactionArgs
    Customer?: boolean | Barber$CustomerArgs
    Appointment?: boolean | Barber$AppointmentArgs
    _count?: boolean | BarberCountOutputTypeArgs
  }

  export type BarberGetPayload<S extends boolean | null | undefined | BarberArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Barber :
    S extends undefined ? never :
    S extends { include: any } & (BarberArgs | BarberFindManyArgs)
    ? Barber  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Transaction' ? Array < TransactionGetPayload<S['include'][P]>>  :
        P extends 'Customer' ? Array < CustomerGetPayload<S['include'][P]>>  :
        P extends 'Appointment' ? Array < AppointmentGetPayload<S['include'][P]>>  :
        P extends '_count' ? BarberCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (BarberArgs | BarberFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Transaction' ? Array < TransactionGetPayload<S['select'][P]>>  :
        P extends 'Customer' ? Array < CustomerGetPayload<S['select'][P]>>  :
        P extends 'Appointment' ? Array < AppointmentGetPayload<S['select'][P]>>  :
        P extends '_count' ? BarberCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Barber ? Barber[P] : never
  } 
      : Barber


  type BarberCountArgs = 
    Omit<BarberFindManyArgs, 'select' | 'include'> & {
      select?: BarberCountAggregateInputType | true
    }

  export interface BarberDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Barber that matches the filter.
     * @param {BarberFindUniqueArgs} args - Arguments to find a Barber
     * @example
     * // Get one Barber
     * const barber = await prisma.barber.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BarberFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BarberFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Barber'> extends True ? Prisma__BarberClient<BarberGetPayload<T>> : Prisma__BarberClient<BarberGetPayload<T> | null, null>

    /**
     * Find one Barber that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BarberFindUniqueOrThrowArgs} args - Arguments to find a Barber
     * @example
     * // Get one Barber
     * const barber = await prisma.barber.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BarberFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BarberFindUniqueOrThrowArgs>
    ): Prisma__BarberClient<BarberGetPayload<T>>

    /**
     * Find the first Barber that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BarberFindFirstArgs} args - Arguments to find a Barber
     * @example
     * // Get one Barber
     * const barber = await prisma.barber.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BarberFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BarberFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Barber'> extends True ? Prisma__BarberClient<BarberGetPayload<T>> : Prisma__BarberClient<BarberGetPayload<T> | null, null>

    /**
     * Find the first Barber that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BarberFindFirstOrThrowArgs} args - Arguments to find a Barber
     * @example
     * // Get one Barber
     * const barber = await prisma.barber.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BarberFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BarberFindFirstOrThrowArgs>
    ): Prisma__BarberClient<BarberGetPayload<T>>

    /**
     * Find zero or more Barbers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BarberFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Barbers
     * const barbers = await prisma.barber.findMany()
     * 
     * // Get first 10 Barbers
     * const barbers = await prisma.barber.findMany({ take: 10 })
     * 
     * // Only select the `barberId`
     * const barberWithBarberIdOnly = await prisma.barber.findMany({ select: { barberId: true } })
     * 
    **/
    findMany<T extends BarberFindManyArgs>(
      args?: SelectSubset<T, BarberFindManyArgs>
    ): Prisma.PrismaPromise<Array<BarberGetPayload<T>>>

    /**
     * Create a Barber.
     * @param {BarberCreateArgs} args - Arguments to create a Barber.
     * @example
     * // Create one Barber
     * const Barber = await prisma.barber.create({
     *   data: {
     *     // ... data to create a Barber
     *   }
     * })
     * 
    **/
    create<T extends BarberCreateArgs>(
      args: SelectSubset<T, BarberCreateArgs>
    ): Prisma__BarberClient<BarberGetPayload<T>>

    /**
     * Create many Barbers.
     *     @param {BarberCreateManyArgs} args - Arguments to create many Barbers.
     *     @example
     *     // Create many Barbers
     *     const barber = await prisma.barber.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BarberCreateManyArgs>(
      args?: SelectSubset<T, BarberCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Barber.
     * @param {BarberDeleteArgs} args - Arguments to delete one Barber.
     * @example
     * // Delete one Barber
     * const Barber = await prisma.barber.delete({
     *   where: {
     *     // ... filter to delete one Barber
     *   }
     * })
     * 
    **/
    delete<T extends BarberDeleteArgs>(
      args: SelectSubset<T, BarberDeleteArgs>
    ): Prisma__BarberClient<BarberGetPayload<T>>

    /**
     * Update one Barber.
     * @param {BarberUpdateArgs} args - Arguments to update one Barber.
     * @example
     * // Update one Barber
     * const barber = await prisma.barber.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BarberUpdateArgs>(
      args: SelectSubset<T, BarberUpdateArgs>
    ): Prisma__BarberClient<BarberGetPayload<T>>

    /**
     * Delete zero or more Barbers.
     * @param {BarberDeleteManyArgs} args - Arguments to filter Barbers to delete.
     * @example
     * // Delete a few Barbers
     * const { count } = await prisma.barber.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BarberDeleteManyArgs>(
      args?: SelectSubset<T, BarberDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Barbers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BarberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Barbers
     * const barber = await prisma.barber.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BarberUpdateManyArgs>(
      args: SelectSubset<T, BarberUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Barber.
     * @param {BarberUpsertArgs} args - Arguments to update or create a Barber.
     * @example
     * // Update or create a Barber
     * const barber = await prisma.barber.upsert({
     *   create: {
     *     // ... data to create a Barber
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Barber we want to update
     *   }
     * })
    **/
    upsert<T extends BarberUpsertArgs>(
      args: SelectSubset<T, BarberUpsertArgs>
    ): Prisma__BarberClient<BarberGetPayload<T>>

    /**
     * Count the number of Barbers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BarberCountArgs} args - Arguments to filter Barbers to count.
     * @example
     * // Count the number of Barbers
     * const count = await prisma.barber.count({
     *   where: {
     *     // ... the filter for the Barbers we want to count
     *   }
     * })
    **/
    count<T extends BarberCountArgs>(
      args?: Subset<T, BarberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BarberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Barber.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BarberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BarberAggregateArgs>(args: Subset<T, BarberAggregateArgs>): Prisma.PrismaPromise<GetBarberAggregateType<T>>

    /**
     * Group by Barber.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BarberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BarberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BarberGroupByArgs['orderBy'] }
        : { orderBy?: BarberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BarberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBarberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Barber.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BarberClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Transaction<T extends Barber$TransactionArgs= {}>(args?: Subset<T, Barber$TransactionArgs>): Prisma.PrismaPromise<Array<TransactionGetPayload<T>>| Null>;

    Customer<T extends Barber$CustomerArgs= {}>(args?: Subset<T, Barber$CustomerArgs>): Prisma.PrismaPromise<Array<CustomerGetPayload<T>>| Null>;

    Appointment<T extends Barber$AppointmentArgs= {}>(args?: Subset<T, Barber$AppointmentArgs>): Prisma.PrismaPromise<Array<AppointmentGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Barber base type for findUnique actions
   */
  export type BarberFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Barber
     */
    select?: BarberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BarberInclude | null
    /**
     * Filter, which Barber to fetch.
     */
    where: BarberWhereUniqueInput
  }

  /**
   * Barber findUnique
   */
  export interface BarberFindUniqueArgs extends BarberFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Barber findUniqueOrThrow
   */
  export type BarberFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Barber
     */
    select?: BarberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BarberInclude | null
    /**
     * Filter, which Barber to fetch.
     */
    where: BarberWhereUniqueInput
  }


  /**
   * Barber base type for findFirst actions
   */
  export type BarberFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Barber
     */
    select?: BarberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BarberInclude | null
    /**
     * Filter, which Barber to fetch.
     */
    where?: BarberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Barbers to fetch.
     */
    orderBy?: Enumerable<BarberOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Barbers.
     */
    cursor?: BarberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Barbers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Barbers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Barbers.
     */
    distinct?: Enumerable<BarberScalarFieldEnum>
  }

  /**
   * Barber findFirst
   */
  export interface BarberFindFirstArgs extends BarberFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Barber findFirstOrThrow
   */
  export type BarberFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Barber
     */
    select?: BarberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BarberInclude | null
    /**
     * Filter, which Barber to fetch.
     */
    where?: BarberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Barbers to fetch.
     */
    orderBy?: Enumerable<BarberOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Barbers.
     */
    cursor?: BarberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Barbers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Barbers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Barbers.
     */
    distinct?: Enumerable<BarberScalarFieldEnum>
  }


  /**
   * Barber findMany
   */
  export type BarberFindManyArgs = {
    /**
     * Select specific fields to fetch from the Barber
     */
    select?: BarberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BarberInclude | null
    /**
     * Filter, which Barbers to fetch.
     */
    where?: BarberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Barbers to fetch.
     */
    orderBy?: Enumerable<BarberOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Barbers.
     */
    cursor?: BarberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Barbers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Barbers.
     */
    skip?: number
    distinct?: Enumerable<BarberScalarFieldEnum>
  }


  /**
   * Barber create
   */
  export type BarberCreateArgs = {
    /**
     * Select specific fields to fetch from the Barber
     */
    select?: BarberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BarberInclude | null
    /**
     * The data needed to create a Barber.
     */
    data: XOR<BarberCreateInput, BarberUncheckedCreateInput>
  }


  /**
   * Barber createMany
   */
  export type BarberCreateManyArgs = {
    /**
     * The data used to create many Barbers.
     */
    data: Enumerable<BarberCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Barber update
   */
  export type BarberUpdateArgs = {
    /**
     * Select specific fields to fetch from the Barber
     */
    select?: BarberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BarberInclude | null
    /**
     * The data needed to update a Barber.
     */
    data: XOR<BarberUpdateInput, BarberUncheckedUpdateInput>
    /**
     * Choose, which Barber to update.
     */
    where: BarberWhereUniqueInput
  }


  /**
   * Barber updateMany
   */
  export type BarberUpdateManyArgs = {
    /**
     * The data used to update Barbers.
     */
    data: XOR<BarberUpdateManyMutationInput, BarberUncheckedUpdateManyInput>
    /**
     * Filter which Barbers to update
     */
    where?: BarberWhereInput
  }


  /**
   * Barber upsert
   */
  export type BarberUpsertArgs = {
    /**
     * Select specific fields to fetch from the Barber
     */
    select?: BarberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BarberInclude | null
    /**
     * The filter to search for the Barber to update in case it exists.
     */
    where: BarberWhereUniqueInput
    /**
     * In case the Barber found by the `where` argument doesn't exist, create a new Barber with this data.
     */
    create: XOR<BarberCreateInput, BarberUncheckedCreateInput>
    /**
     * In case the Barber was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BarberUpdateInput, BarberUncheckedUpdateInput>
  }


  /**
   * Barber delete
   */
  export type BarberDeleteArgs = {
    /**
     * Select specific fields to fetch from the Barber
     */
    select?: BarberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BarberInclude | null
    /**
     * Filter which Barber to delete.
     */
    where: BarberWhereUniqueInput
  }


  /**
   * Barber deleteMany
   */
  export type BarberDeleteManyArgs = {
    /**
     * Filter which Barbers to delete
     */
    where?: BarberWhereInput
  }


  /**
   * Barber.Transaction
   */
  export type Barber$TransactionArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude | null
    where?: TransactionWhereInput
    orderBy?: Enumerable<TransactionOrderByWithRelationInput>
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TransactionScalarFieldEnum>
  }


  /**
   * Barber.Customer
   */
  export type Barber$CustomerArgs = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
    where?: CustomerWhereInput
    orderBy?: Enumerable<CustomerOrderByWithRelationInput>
    cursor?: CustomerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CustomerScalarFieldEnum>
  }


  /**
   * Barber.Appointment
   */
  export type Barber$AppointmentArgs = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude | null
    where?: AppointmentWhereInput
    orderBy?: Enumerable<AppointmentOrderByWithRelationInput>
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AppointmentScalarFieldEnum>
  }


  /**
   * Barber without action
   */
  export type BarberArgs = {
    /**
     * Select specific fields to fetch from the Barber
     */
    select?: BarberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BarberInclude | null
  }



  /**
   * Model Customer
   */


  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerAvgAggregateOutputType = {
    phoneNumber: number | null
  }

  export type CustomerSumAggregateOutputType = {
    phoneNumber: number | null
  }

  export type CustomerMinAggregateOutputType = {
    customerId: string | null
    firstName: string | null
    lastName: string | null
    city: string | null
    phoneNumber: number | null
    ffavoriteBarber: string | null
  }

  export type CustomerMaxAggregateOutputType = {
    customerId: string | null
    firstName: string | null
    lastName: string | null
    city: string | null
    phoneNumber: number | null
    ffavoriteBarber: string | null
  }

  export type CustomerCountAggregateOutputType = {
    customerId: number
    firstName: number
    lastName: number
    city: number
    phoneNumber: number
    ffavoriteBarber: number
    _all: number
  }


  export type CustomerAvgAggregateInputType = {
    phoneNumber?: true
  }

  export type CustomerSumAggregateInputType = {
    phoneNumber?: true
  }

  export type CustomerMinAggregateInputType = {
    customerId?: true
    firstName?: true
    lastName?: true
    city?: true
    phoneNumber?: true
    ffavoriteBarber?: true
  }

  export type CustomerMaxAggregateInputType = {
    customerId?: true
    firstName?: true
    lastName?: true
    city?: true
    phoneNumber?: true
    ffavoriteBarber?: true
  }

  export type CustomerCountAggregateInputType = {
    customerId?: true
    firstName?: true
    lastName?: true
    city?: true
    phoneNumber?: true
    ffavoriteBarber?: true
    _all?: true
  }

  export type CustomerAggregateArgs = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: Enumerable<CustomerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs = {
    where?: CustomerWhereInput
    orderBy?: Enumerable<CustomerOrderByWithAggregationInput>
    by: CustomerScalarFieldEnum[]
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _avg?: CustomerAvgAggregateInputType
    _sum?: CustomerSumAggregateInputType
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }


  export type CustomerGroupByOutputType = {
    customerId: string
    firstName: string
    lastName: string
    city: string
    phoneNumber: number
    ffavoriteBarber: string
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect = {
    customerId?: boolean
    firstName?: boolean
    lastName?: boolean
    city?: boolean
    phoneNumber?: boolean
    ffavoriteBarber?: boolean
    barber?: boolean | BarberArgs
    Transaction?: boolean | Customer$TransactionArgs
    Appointment?: boolean | Customer$AppointmentArgs
    _count?: boolean | CustomerCountOutputTypeArgs
  }


  export type CustomerInclude = {
    barber?: boolean | BarberArgs
    Transaction?: boolean | Customer$TransactionArgs
    Appointment?: boolean | Customer$AppointmentArgs
    _count?: boolean | CustomerCountOutputTypeArgs
  }

  export type CustomerGetPayload<S extends boolean | null | undefined | CustomerArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Customer :
    S extends undefined ? never :
    S extends { include: any } & (CustomerArgs | CustomerFindManyArgs)
    ? Customer  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'barber' ? BarberGetPayload<S['include'][P]> :
        P extends 'Transaction' ? Array < TransactionGetPayload<S['include'][P]>>  :
        P extends 'Appointment' ? Array < AppointmentGetPayload<S['include'][P]>>  :
        P extends '_count' ? CustomerCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CustomerArgs | CustomerFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'barber' ? BarberGetPayload<S['select'][P]> :
        P extends 'Transaction' ? Array < TransactionGetPayload<S['select'][P]>>  :
        P extends 'Appointment' ? Array < AppointmentGetPayload<S['select'][P]>>  :
        P extends '_count' ? CustomerCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Customer ? Customer[P] : never
  } 
      : Customer


  type CustomerCountArgs = 
    Omit<CustomerFindManyArgs, 'select' | 'include'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CustomerFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CustomerFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Customer'> extends True ? Prisma__CustomerClient<CustomerGetPayload<T>> : Prisma__CustomerClient<CustomerGetPayload<T> | null, null>

    /**
     * Find one Customer that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CustomerFindUniqueOrThrowArgs>
    ): Prisma__CustomerClient<CustomerGetPayload<T>>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CustomerFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CustomerFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Customer'> extends True ? Prisma__CustomerClient<CustomerGetPayload<T>> : Prisma__CustomerClient<CustomerGetPayload<T> | null, null>

    /**
     * Find the first Customer that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CustomerFindFirstOrThrowArgs>
    ): Prisma__CustomerClient<CustomerGetPayload<T>>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `customerId`
     * const customerWithCustomerIdOnly = await prisma.customer.findMany({ select: { customerId: true } })
     * 
    **/
    findMany<T extends CustomerFindManyArgs>(
      args?: SelectSubset<T, CustomerFindManyArgs>
    ): Prisma.PrismaPromise<Array<CustomerGetPayload<T>>>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
    **/
    create<T extends CustomerCreateArgs>(
      args: SelectSubset<T, CustomerCreateArgs>
    ): Prisma__CustomerClient<CustomerGetPayload<T>>

    /**
     * Create many Customers.
     *     @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     *     @example
     *     // Create many Customers
     *     const customer = await prisma.customer.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CustomerCreateManyArgs>(
      args?: SelectSubset<T, CustomerCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
    **/
    delete<T extends CustomerDeleteArgs>(
      args: SelectSubset<T, CustomerDeleteArgs>
    ): Prisma__CustomerClient<CustomerGetPayload<T>>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CustomerUpdateArgs>(
      args: SelectSubset<T, CustomerUpdateArgs>
    ): Prisma__CustomerClient<CustomerGetPayload<T>>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CustomerDeleteManyArgs>(
      args?: SelectSubset<T, CustomerDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CustomerUpdateManyArgs>(
      args: SelectSubset<T, CustomerUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
    **/
    upsert<T extends CustomerUpsertArgs>(
      args: SelectSubset<T, CustomerUpsertArgs>
    ): Prisma__CustomerClient<CustomerGetPayload<T>>

    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CustomerClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    barber<T extends BarberArgs= {}>(args?: Subset<T, BarberArgs>): Prisma__BarberClient<BarberGetPayload<T> | Null>;

    Transaction<T extends Customer$TransactionArgs= {}>(args?: Subset<T, Customer$TransactionArgs>): Prisma.PrismaPromise<Array<TransactionGetPayload<T>>| Null>;

    Appointment<T extends Customer$AppointmentArgs= {}>(args?: Subset<T, Customer$AppointmentArgs>): Prisma.PrismaPromise<Array<AppointmentGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Customer base type for findUnique actions
   */
  export type CustomerFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findUnique
   */
  export interface CustomerFindUniqueArgs extends CustomerFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }


  /**
   * Customer base type for findFirst actions
   */
  export type CustomerFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: Enumerable<CustomerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: Enumerable<CustomerScalarFieldEnum>
  }

  /**
   * Customer findFirst
   */
  export interface CustomerFindFirstArgs extends CustomerFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: Enumerable<CustomerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: Enumerable<CustomerScalarFieldEnum>
  }


  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: Enumerable<CustomerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: Enumerable<CustomerScalarFieldEnum>
  }


  /**
   * Customer create
   */
  export type CustomerCreateArgs = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }


  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs = {
    /**
     * The data used to create many Customers.
     */
    data: Enumerable<CustomerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Customer update
   */
  export type CustomerUpdateArgs = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }


  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
  }


  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }


  /**
   * Customer delete
   */
  export type CustomerDeleteArgs = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }


  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
  }


  /**
   * Customer.Transaction
   */
  export type Customer$TransactionArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransactionInclude | null
    where?: TransactionWhereInput
    orderBy?: Enumerable<TransactionOrderByWithRelationInput>
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TransactionScalarFieldEnum>
  }


  /**
   * Customer.Appointment
   */
  export type Customer$AppointmentArgs = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude | null
    where?: AppointmentWhereInput
    orderBy?: Enumerable<AppointmentOrderByWithRelationInput>
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AppointmentScalarFieldEnum>
  }


  /**
   * Customer without action
   */
  export type CustomerArgs = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
  }



  /**
   * Model Appointment
   */


  export type AggregateAppointment = {
    _count: AppointmentCountAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  export type AppointmentMinAggregateOutputType = {
    appointmentDate: Date | null
    Date: Date | null
    fcustomerId: string | null
    fbarberId: string | null
    appointmentId: string | null
  }

  export type AppointmentMaxAggregateOutputType = {
    appointmentDate: Date | null
    Date: Date | null
    fcustomerId: string | null
    fbarberId: string | null
    appointmentId: string | null
  }

  export type AppointmentCountAggregateOutputType = {
    appointmentDate: number
    Date: number
    fcustomerId: number
    fbarberId: number
    appointmentId: number
    _all: number
  }


  export type AppointmentMinAggregateInputType = {
    appointmentDate?: true
    Date?: true
    fcustomerId?: true
    fbarberId?: true
    appointmentId?: true
  }

  export type AppointmentMaxAggregateInputType = {
    appointmentDate?: true
    Date?: true
    fcustomerId?: true
    fbarberId?: true
    appointmentId?: true
  }

  export type AppointmentCountAggregateInputType = {
    appointmentDate?: true
    Date?: true
    fcustomerId?: true
    fbarberId?: true
    appointmentId?: true
    _all?: true
  }

  export type AppointmentAggregateArgs = {
    /**
     * Filter which Appointment to aggregate.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: Enumerable<AppointmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Appointments
    **/
    _count?: true | AppointmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppointmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppointmentMaxAggregateInputType
  }

  export type GetAppointmentAggregateType<T extends AppointmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAppointment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppointment[P]>
      : GetScalarType<T[P], AggregateAppointment[P]>
  }




  export type AppointmentGroupByArgs = {
    where?: AppointmentWhereInput
    orderBy?: Enumerable<AppointmentOrderByWithAggregationInput>
    by: AppointmentScalarFieldEnum[]
    having?: AppointmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppointmentCountAggregateInputType | true
    _min?: AppointmentMinAggregateInputType
    _max?: AppointmentMaxAggregateInputType
  }


  export type AppointmentGroupByOutputType = {
    appointmentDate: Date
    Date: Date
    fcustomerId: string
    fbarberId: string
    appointmentId: string
    _count: AppointmentCountAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  type GetAppointmentGroupByPayload<T extends AppointmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AppointmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppointmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
            : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
        }
      >
    >


  export type AppointmentSelect = {
    appointmentDate?: boolean
    Date?: boolean
    fcustomerId?: boolean
    fbarberId?: boolean
    appointmentId?: boolean
    customer?: boolean | CustomerArgs
    barber?: boolean | BarberArgs
  }


  export type AppointmentInclude = {
    customer?: boolean | CustomerArgs
    barber?: boolean | BarberArgs
  }

  export type AppointmentGetPayload<S extends boolean | null | undefined | AppointmentArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Appointment :
    S extends undefined ? never :
    S extends { include: any } & (AppointmentArgs | AppointmentFindManyArgs)
    ? Appointment  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'customer' ? CustomerGetPayload<S['include'][P]> :
        P extends 'barber' ? BarberGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (AppointmentArgs | AppointmentFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'customer' ? CustomerGetPayload<S['select'][P]> :
        P extends 'barber' ? BarberGetPayload<S['select'][P]> :  P extends keyof Appointment ? Appointment[P] : never
  } 
      : Appointment


  type AppointmentCountArgs = 
    Omit<AppointmentFindManyArgs, 'select' | 'include'> & {
      select?: AppointmentCountAggregateInputType | true
    }

  export interface AppointmentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Appointment that matches the filter.
     * @param {AppointmentFindUniqueArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AppointmentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AppointmentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Appointment'> extends True ? Prisma__AppointmentClient<AppointmentGetPayload<T>> : Prisma__AppointmentClient<AppointmentGetPayload<T> | null, null>

    /**
     * Find one Appointment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AppointmentFindUniqueOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AppointmentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AppointmentFindUniqueOrThrowArgs>
    ): Prisma__AppointmentClient<AppointmentGetPayload<T>>

    /**
     * Find the first Appointment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AppointmentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AppointmentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Appointment'> extends True ? Prisma__AppointmentClient<AppointmentGetPayload<T>> : Prisma__AppointmentClient<AppointmentGetPayload<T> | null, null>

    /**
     * Find the first Appointment that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AppointmentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AppointmentFindFirstOrThrowArgs>
    ): Prisma__AppointmentClient<AppointmentGetPayload<T>>

    /**
     * Find zero or more Appointments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Appointments
     * const appointments = await prisma.appointment.findMany()
     * 
     * // Get first 10 Appointments
     * const appointments = await prisma.appointment.findMany({ take: 10 })
     * 
     * // Only select the `appointmentDate`
     * const appointmentWithAppointmentDateOnly = await prisma.appointment.findMany({ select: { appointmentDate: true } })
     * 
    **/
    findMany<T extends AppointmentFindManyArgs>(
      args?: SelectSubset<T, AppointmentFindManyArgs>
    ): Prisma.PrismaPromise<Array<AppointmentGetPayload<T>>>

    /**
     * Create a Appointment.
     * @param {AppointmentCreateArgs} args - Arguments to create a Appointment.
     * @example
     * // Create one Appointment
     * const Appointment = await prisma.appointment.create({
     *   data: {
     *     // ... data to create a Appointment
     *   }
     * })
     * 
    **/
    create<T extends AppointmentCreateArgs>(
      args: SelectSubset<T, AppointmentCreateArgs>
    ): Prisma__AppointmentClient<AppointmentGetPayload<T>>

    /**
     * Create many Appointments.
     *     @param {AppointmentCreateManyArgs} args - Arguments to create many Appointments.
     *     @example
     *     // Create many Appointments
     *     const appointment = await prisma.appointment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AppointmentCreateManyArgs>(
      args?: SelectSubset<T, AppointmentCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Appointment.
     * @param {AppointmentDeleteArgs} args - Arguments to delete one Appointment.
     * @example
     * // Delete one Appointment
     * const Appointment = await prisma.appointment.delete({
     *   where: {
     *     // ... filter to delete one Appointment
     *   }
     * })
     * 
    **/
    delete<T extends AppointmentDeleteArgs>(
      args: SelectSubset<T, AppointmentDeleteArgs>
    ): Prisma__AppointmentClient<AppointmentGetPayload<T>>

    /**
     * Update one Appointment.
     * @param {AppointmentUpdateArgs} args - Arguments to update one Appointment.
     * @example
     * // Update one Appointment
     * const appointment = await prisma.appointment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AppointmentUpdateArgs>(
      args: SelectSubset<T, AppointmentUpdateArgs>
    ): Prisma__AppointmentClient<AppointmentGetPayload<T>>

    /**
     * Delete zero or more Appointments.
     * @param {AppointmentDeleteManyArgs} args - Arguments to filter Appointments to delete.
     * @example
     * // Delete a few Appointments
     * const { count } = await prisma.appointment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AppointmentDeleteManyArgs>(
      args?: SelectSubset<T, AppointmentDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AppointmentUpdateManyArgs>(
      args: SelectSubset<T, AppointmentUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Appointment.
     * @param {AppointmentUpsertArgs} args - Arguments to update or create a Appointment.
     * @example
     * // Update or create a Appointment
     * const appointment = await prisma.appointment.upsert({
     *   create: {
     *     // ... data to create a Appointment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Appointment we want to update
     *   }
     * })
    **/
    upsert<T extends AppointmentUpsertArgs>(
      args: SelectSubset<T, AppointmentUpsertArgs>
    ): Prisma__AppointmentClient<AppointmentGetPayload<T>>

    /**
     * Count the number of Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentCountArgs} args - Arguments to filter Appointments to count.
     * @example
     * // Count the number of Appointments
     * const count = await prisma.appointment.count({
     *   where: {
     *     // ... the filter for the Appointments we want to count
     *   }
     * })
    **/
    count<T extends AppointmentCountArgs>(
      args?: Subset<T, AppointmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppointmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppointmentAggregateArgs>(args: Subset<T, AppointmentAggregateArgs>): Prisma.PrismaPromise<GetAppointmentAggregateType<T>>

    /**
     * Group by Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppointmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppointmentGroupByArgs['orderBy'] }
        : { orderBy?: AppointmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppointmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Appointment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AppointmentClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    customer<T extends CustomerArgs= {}>(args?: Subset<T, CustomerArgs>): Prisma__CustomerClient<CustomerGetPayload<T> | Null>;

    barber<T extends BarberArgs= {}>(args?: Subset<T, BarberArgs>): Prisma__BarberClient<BarberGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Appointment base type for findUnique actions
   */
  export type AppointmentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment findUnique
   */
  export interface AppointmentFindUniqueArgs extends AppointmentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Appointment findUniqueOrThrow
   */
  export type AppointmentFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }


  /**
   * Appointment base type for findFirst actions
   */
  export type AppointmentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: Enumerable<AppointmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: Enumerable<AppointmentScalarFieldEnum>
  }

  /**
   * Appointment findFirst
   */
  export interface AppointmentFindFirstArgs extends AppointmentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Appointment findFirstOrThrow
   */
  export type AppointmentFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: Enumerable<AppointmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: Enumerable<AppointmentScalarFieldEnum>
  }


  /**
   * Appointment findMany
   */
  export type AppointmentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude | null
    /**
     * Filter, which Appointments to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: Enumerable<AppointmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    distinct?: Enumerable<AppointmentScalarFieldEnum>
  }


  /**
   * Appointment create
   */
  export type AppointmentCreateArgs = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude | null
    /**
     * The data needed to create a Appointment.
     */
    data: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
  }


  /**
   * Appointment createMany
   */
  export type AppointmentCreateManyArgs = {
    /**
     * The data used to create many Appointments.
     */
    data: Enumerable<AppointmentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Appointment update
   */
  export type AppointmentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude | null
    /**
     * The data needed to update a Appointment.
     */
    data: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
    /**
     * Choose, which Appointment to update.
     */
    where: AppointmentWhereUniqueInput
  }


  /**
   * Appointment updateMany
   */
  export type AppointmentUpdateManyArgs = {
    /**
     * The data used to update Appointments.
     */
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyInput>
    /**
     * Filter which Appointments to update
     */
    where?: AppointmentWhereInput
  }


  /**
   * Appointment upsert
   */
  export type AppointmentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude | null
    /**
     * The filter to search for the Appointment to update in case it exists.
     */
    where: AppointmentWhereUniqueInput
    /**
     * In case the Appointment found by the `where` argument doesn't exist, create a new Appointment with this data.
     */
    create: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
    /**
     * In case the Appointment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
  }


  /**
   * Appointment delete
   */
  export type AppointmentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude | null
    /**
     * Filter which Appointment to delete.
     */
    where: AppointmentWhereUniqueInput
  }


  /**
   * Appointment deleteMany
   */
  export type AppointmentDeleteManyArgs = {
    /**
     * Filter which Appointments to delete
     */
    where?: AppointmentWhereInput
  }


  /**
   * Appointment without action
   */
  export type AppointmentArgs = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AppointmentScalarFieldEnum: {
    appointmentDate: 'appointmentDate',
    Date: 'Date',
    fcustomerId: 'fcustomerId',
    fbarberId: 'fbarberId',
    appointmentId: 'appointmentId'
  };

  export type AppointmentScalarFieldEnum = (typeof AppointmentScalarFieldEnum)[keyof typeof AppointmentScalarFieldEnum]


  export const BarberScalarFieldEnum: {
    barberId: 'barberId',
    firstName: 'firstName'
  };

  export type BarberScalarFieldEnum = (typeof BarberScalarFieldEnum)[keyof typeof BarberScalarFieldEnum]


  export const CustomerScalarFieldEnum: {
    customerId: 'customerId',
    firstName: 'firstName',
    lastName: 'lastName',
    city: 'city',
    phoneNumber: 'phoneNumber',
    ffavoriteBarber: 'ffavoriteBarber'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TransactionScalarFieldEnum: {
    transactionId: 'transactionId',
    fbarberId: 'fbarberId',
    fcustomerId: 'fcustomerId',
    dateOfOrder: 'dateOfOrder',
    orderPrice: 'orderPrice'
  };

  export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type TransactionWhereInput = {
    AND?: Enumerable<TransactionWhereInput>
    OR?: Enumerable<TransactionWhereInput>
    NOT?: Enumerable<TransactionWhereInput>
    transactionId?: StringFilter | string
    fbarberId?: StringFilter | string
    fcustomerId?: StringFilter | string
    dateOfOrder?: DateTimeFilter | Date | string
    orderPrice?: FloatFilter | number
    barber?: XOR<BarberRelationFilter, BarberWhereInput>
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
  }

  export type TransactionOrderByWithRelationInput = {
    transactionId?: SortOrder
    fbarberId?: SortOrder
    fcustomerId?: SortOrder
    dateOfOrder?: SortOrder
    orderPrice?: SortOrder
    barber?: BarberOrderByWithRelationInput
    customer?: CustomerOrderByWithRelationInput
  }

  export type TransactionWhereUniqueInput = {
    transactionId?: string
  }

  export type TransactionOrderByWithAggregationInput = {
    transactionId?: SortOrder
    fbarberId?: SortOrder
    fcustomerId?: SortOrder
    dateOfOrder?: SortOrder
    orderPrice?: SortOrder
    _count?: TransactionCountOrderByAggregateInput
    _avg?: TransactionAvgOrderByAggregateInput
    _max?: TransactionMaxOrderByAggregateInput
    _min?: TransactionMinOrderByAggregateInput
    _sum?: TransactionSumOrderByAggregateInput
  }

  export type TransactionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TransactionScalarWhereWithAggregatesInput>
    OR?: Enumerable<TransactionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TransactionScalarWhereWithAggregatesInput>
    transactionId?: StringWithAggregatesFilter | string
    fbarberId?: StringWithAggregatesFilter | string
    fcustomerId?: StringWithAggregatesFilter | string
    dateOfOrder?: DateTimeWithAggregatesFilter | Date | string
    orderPrice?: FloatWithAggregatesFilter | number
  }

  export type BarberWhereInput = {
    AND?: Enumerable<BarberWhereInput>
    OR?: Enumerable<BarberWhereInput>
    NOT?: Enumerable<BarberWhereInput>
    barberId?: StringFilter | string
    firstName?: StringFilter | string
    Transaction?: TransactionListRelationFilter
    Customer?: CustomerListRelationFilter
    Appointment?: AppointmentListRelationFilter
  }

  export type BarberOrderByWithRelationInput = {
    barberId?: SortOrder
    firstName?: SortOrder
    Transaction?: TransactionOrderByRelationAggregateInput
    Customer?: CustomerOrderByRelationAggregateInput
    Appointment?: AppointmentOrderByRelationAggregateInput
  }

  export type BarberWhereUniqueInput = {
    barberId?: string
  }

  export type BarberOrderByWithAggregationInput = {
    barberId?: SortOrder
    firstName?: SortOrder
    _count?: BarberCountOrderByAggregateInput
    _max?: BarberMaxOrderByAggregateInput
    _min?: BarberMinOrderByAggregateInput
  }

  export type BarberScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BarberScalarWhereWithAggregatesInput>
    OR?: Enumerable<BarberScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BarberScalarWhereWithAggregatesInput>
    barberId?: StringWithAggregatesFilter | string
    firstName?: StringWithAggregatesFilter | string
  }

  export type CustomerWhereInput = {
    AND?: Enumerable<CustomerWhereInput>
    OR?: Enumerable<CustomerWhereInput>
    NOT?: Enumerable<CustomerWhereInput>
    customerId?: StringFilter | string
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    city?: StringFilter | string
    phoneNumber?: IntFilter | number
    ffavoriteBarber?: StringFilter | string
    barber?: XOR<BarberRelationFilter, BarberWhereInput>
    Transaction?: TransactionListRelationFilter
    Appointment?: AppointmentListRelationFilter
  }

  export type CustomerOrderByWithRelationInput = {
    customerId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    city?: SortOrder
    phoneNumber?: SortOrder
    ffavoriteBarber?: SortOrder
    barber?: BarberOrderByWithRelationInput
    Transaction?: TransactionOrderByRelationAggregateInput
    Appointment?: AppointmentOrderByRelationAggregateInput
  }

  export type CustomerWhereUniqueInput = {
    customerId?: string
    customerId_phoneNumber?: CustomerCustomerIdPhoneNumberCompoundUniqueInput
  }

  export type CustomerOrderByWithAggregationInput = {
    customerId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    city?: SortOrder
    phoneNumber?: SortOrder
    ffavoriteBarber?: SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _avg?: CustomerAvgOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
    _sum?: CustomerSumOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CustomerScalarWhereWithAggregatesInput>
    OR?: Enumerable<CustomerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CustomerScalarWhereWithAggregatesInput>
    customerId?: StringWithAggregatesFilter | string
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    city?: StringWithAggregatesFilter | string
    phoneNumber?: IntWithAggregatesFilter | number
    ffavoriteBarber?: StringWithAggregatesFilter | string
  }

  export type AppointmentWhereInput = {
    AND?: Enumerable<AppointmentWhereInput>
    OR?: Enumerable<AppointmentWhereInput>
    NOT?: Enumerable<AppointmentWhereInput>
    appointmentDate?: DateTimeFilter | Date | string
    Date?: DateTimeFilter | Date | string
    fcustomerId?: StringFilter | string
    fbarberId?: StringFilter | string
    appointmentId?: StringFilter | string
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
    barber?: XOR<BarberRelationFilter, BarberWhereInput>
  }

  export type AppointmentOrderByWithRelationInput = {
    appointmentDate?: SortOrder
    Date?: SortOrder
    fcustomerId?: SortOrder
    fbarberId?: SortOrder
    appointmentId?: SortOrder
    customer?: CustomerOrderByWithRelationInput
    barber?: BarberOrderByWithRelationInput
  }

  export type AppointmentWhereUniqueInput = {
    appointmentId?: string
  }

  export type AppointmentOrderByWithAggregationInput = {
    appointmentDate?: SortOrder
    Date?: SortOrder
    fcustomerId?: SortOrder
    fbarberId?: SortOrder
    appointmentId?: SortOrder
    _count?: AppointmentCountOrderByAggregateInput
    _max?: AppointmentMaxOrderByAggregateInput
    _min?: AppointmentMinOrderByAggregateInput
  }

  export type AppointmentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AppointmentScalarWhereWithAggregatesInput>
    OR?: Enumerable<AppointmentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AppointmentScalarWhereWithAggregatesInput>
    appointmentDate?: DateTimeWithAggregatesFilter | Date | string
    Date?: DateTimeWithAggregatesFilter | Date | string
    fcustomerId?: StringWithAggregatesFilter | string
    fbarberId?: StringWithAggregatesFilter | string
    appointmentId?: StringWithAggregatesFilter | string
  }

  export type TransactionCreateInput = {
    transactionId?: string
    dateOfOrder: Date | string
    orderPrice: number
    barber: BarberCreateNestedOneWithoutTransactionInput
    customer: CustomerCreateNestedOneWithoutTransactionInput
  }

  export type TransactionUncheckedCreateInput = {
    transactionId?: string
    fbarberId: string
    fcustomerId: string
    dateOfOrder: Date | string
    orderPrice: number
  }

  export type TransactionUpdateInput = {
    transactionId?: StringFieldUpdateOperationsInput | string
    dateOfOrder?: DateTimeFieldUpdateOperationsInput | Date | string
    orderPrice?: FloatFieldUpdateOperationsInput | number
    barber?: BarberUpdateOneRequiredWithoutTransactionNestedInput
    customer?: CustomerUpdateOneRequiredWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateInput = {
    transactionId?: StringFieldUpdateOperationsInput | string
    fbarberId?: StringFieldUpdateOperationsInput | string
    fcustomerId?: StringFieldUpdateOperationsInput | string
    dateOfOrder?: DateTimeFieldUpdateOperationsInput | Date | string
    orderPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type TransactionCreateManyInput = {
    transactionId?: string
    fbarberId: string
    fcustomerId: string
    dateOfOrder: Date | string
    orderPrice: number
  }

  export type TransactionUpdateManyMutationInput = {
    transactionId?: StringFieldUpdateOperationsInput | string
    dateOfOrder?: DateTimeFieldUpdateOperationsInput | Date | string
    orderPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type TransactionUncheckedUpdateManyInput = {
    transactionId?: StringFieldUpdateOperationsInput | string
    fbarberId?: StringFieldUpdateOperationsInput | string
    fcustomerId?: StringFieldUpdateOperationsInput | string
    dateOfOrder?: DateTimeFieldUpdateOperationsInput | Date | string
    orderPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type BarberCreateInput = {
    barberId?: string
    firstName: string
    Transaction?: TransactionCreateNestedManyWithoutBarberInput
    Customer?: CustomerCreateNestedManyWithoutBarberInput
    Appointment?: AppointmentCreateNestedManyWithoutBarberInput
  }

  export type BarberUncheckedCreateInput = {
    barberId?: string
    firstName: string
    Transaction?: TransactionUncheckedCreateNestedManyWithoutBarberInput
    Customer?: CustomerUncheckedCreateNestedManyWithoutBarberInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutBarberInput
  }

  export type BarberUpdateInput = {
    barberId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    Transaction?: TransactionUpdateManyWithoutBarberNestedInput
    Customer?: CustomerUpdateManyWithoutBarberNestedInput
    Appointment?: AppointmentUpdateManyWithoutBarberNestedInput
  }

  export type BarberUncheckedUpdateInput = {
    barberId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    Transaction?: TransactionUncheckedUpdateManyWithoutBarberNestedInput
    Customer?: CustomerUncheckedUpdateManyWithoutBarberNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutBarberNestedInput
  }

  export type BarberCreateManyInput = {
    barberId?: string
    firstName: string
  }

  export type BarberUpdateManyMutationInput = {
    barberId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
  }

  export type BarberUncheckedUpdateManyInput = {
    barberId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
  }

  export type CustomerCreateInput = {
    customerId?: string
    firstName: string
    lastName: string
    city: string
    phoneNumber: number
    barber: BarberCreateNestedOneWithoutCustomerInput
    Transaction?: TransactionCreateNestedManyWithoutCustomerInput
    Appointment?: AppointmentCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateInput = {
    customerId?: string
    firstName: string
    lastName: string
    city: string
    phoneNumber: number
    ffavoriteBarber: string
    Transaction?: TransactionUncheckedCreateNestedManyWithoutCustomerInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUpdateInput = {
    customerId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phoneNumber?: IntFieldUpdateOperationsInput | number
    barber?: BarberUpdateOneRequiredWithoutCustomerNestedInput
    Transaction?: TransactionUpdateManyWithoutCustomerNestedInput
    Appointment?: AppointmentUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateInput = {
    customerId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phoneNumber?: IntFieldUpdateOperationsInput | number
    ffavoriteBarber?: StringFieldUpdateOperationsInput | string
    Transaction?: TransactionUncheckedUpdateManyWithoutCustomerNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerCreateManyInput = {
    customerId?: string
    firstName: string
    lastName: string
    city: string
    phoneNumber: number
    ffavoriteBarber: string
  }

  export type CustomerUpdateManyMutationInput = {
    customerId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phoneNumber?: IntFieldUpdateOperationsInput | number
  }

  export type CustomerUncheckedUpdateManyInput = {
    customerId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phoneNumber?: IntFieldUpdateOperationsInput | number
    ffavoriteBarber?: StringFieldUpdateOperationsInput | string
  }

  export type AppointmentCreateInput = {
    appointmentDate: Date | string
    Date: Date | string
    appointmentId?: string
    customer: CustomerCreateNestedOneWithoutAppointmentInput
    barber: BarberCreateNestedOneWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateInput = {
    appointmentDate: Date | string
    Date: Date | string
    fcustomerId: string
    fbarberId: string
    appointmentId?: string
  }

  export type AppointmentUpdateInput = {
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentId?: StringFieldUpdateOperationsInput | string
    customer?: CustomerUpdateOneRequiredWithoutAppointmentNestedInput
    barber?: BarberUpdateOneRequiredWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateInput = {
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    fcustomerId?: StringFieldUpdateOperationsInput | string
    fbarberId?: StringFieldUpdateOperationsInput | string
    appointmentId?: StringFieldUpdateOperationsInput | string
  }

  export type AppointmentCreateManyInput = {
    appointmentDate: Date | string
    Date: Date | string
    fcustomerId: string
    fbarberId: string
    appointmentId?: string
  }

  export type AppointmentUpdateManyMutationInput = {
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentId?: StringFieldUpdateOperationsInput | string
  }

  export type AppointmentUncheckedUpdateManyInput = {
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    fcustomerId?: StringFieldUpdateOperationsInput | string
    fbarberId?: StringFieldUpdateOperationsInput | string
    appointmentId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type BarberRelationFilter = {
    is?: BarberWhereInput
    isNot?: BarberWhereInput
  }

  export type CustomerRelationFilter = {
    is?: CustomerWhereInput
    isNot?: CustomerWhereInput
  }

  export type TransactionCountOrderByAggregateInput = {
    transactionId?: SortOrder
    fbarberId?: SortOrder
    fcustomerId?: SortOrder
    dateOfOrder?: SortOrder
    orderPrice?: SortOrder
  }

  export type TransactionAvgOrderByAggregateInput = {
    orderPrice?: SortOrder
  }

  export type TransactionMaxOrderByAggregateInput = {
    transactionId?: SortOrder
    fbarberId?: SortOrder
    fcustomerId?: SortOrder
    dateOfOrder?: SortOrder
    orderPrice?: SortOrder
  }

  export type TransactionMinOrderByAggregateInput = {
    transactionId?: SortOrder
    fbarberId?: SortOrder
    fcustomerId?: SortOrder
    dateOfOrder?: SortOrder
    orderPrice?: SortOrder
  }

  export type TransactionSumOrderByAggregateInput = {
    orderPrice?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type TransactionListRelationFilter = {
    every?: TransactionWhereInput
    some?: TransactionWhereInput
    none?: TransactionWhereInput
  }

  export type CustomerListRelationFilter = {
    every?: CustomerWhereInput
    some?: CustomerWhereInput
    none?: CustomerWhereInput
  }

  export type AppointmentListRelationFilter = {
    every?: AppointmentWhereInput
    some?: AppointmentWhereInput
    none?: AppointmentWhereInput
  }

  export type TransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AppointmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BarberCountOrderByAggregateInput = {
    barberId?: SortOrder
    firstName?: SortOrder
  }

  export type BarberMaxOrderByAggregateInput = {
    barberId?: SortOrder
    firstName?: SortOrder
  }

  export type BarberMinOrderByAggregateInput = {
    barberId?: SortOrder
    firstName?: SortOrder
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type CustomerCustomerIdPhoneNumberCompoundUniqueInput = {
    customerId: string
    phoneNumber: number
  }

  export type CustomerCountOrderByAggregateInput = {
    customerId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    city?: SortOrder
    phoneNumber?: SortOrder
    ffavoriteBarber?: SortOrder
  }

  export type CustomerAvgOrderByAggregateInput = {
    phoneNumber?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    customerId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    city?: SortOrder
    phoneNumber?: SortOrder
    ffavoriteBarber?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    customerId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    city?: SortOrder
    phoneNumber?: SortOrder
    ffavoriteBarber?: SortOrder
  }

  export type CustomerSumOrderByAggregateInput = {
    phoneNumber?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type AppointmentCountOrderByAggregateInput = {
    appointmentDate?: SortOrder
    Date?: SortOrder
    fcustomerId?: SortOrder
    fbarberId?: SortOrder
    appointmentId?: SortOrder
  }

  export type AppointmentMaxOrderByAggregateInput = {
    appointmentDate?: SortOrder
    Date?: SortOrder
    fcustomerId?: SortOrder
    fbarberId?: SortOrder
    appointmentId?: SortOrder
  }

  export type AppointmentMinOrderByAggregateInput = {
    appointmentDate?: SortOrder
    Date?: SortOrder
    fcustomerId?: SortOrder
    fbarberId?: SortOrder
    appointmentId?: SortOrder
  }

  export type BarberCreateNestedOneWithoutTransactionInput = {
    create?: XOR<BarberCreateWithoutTransactionInput, BarberUncheckedCreateWithoutTransactionInput>
    connectOrCreate?: BarberCreateOrConnectWithoutTransactionInput
    connect?: BarberWhereUniqueInput
  }

  export type CustomerCreateNestedOneWithoutTransactionInput = {
    create?: XOR<CustomerCreateWithoutTransactionInput, CustomerUncheckedCreateWithoutTransactionInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutTransactionInput
    connect?: CustomerWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BarberUpdateOneRequiredWithoutTransactionNestedInput = {
    create?: XOR<BarberCreateWithoutTransactionInput, BarberUncheckedCreateWithoutTransactionInput>
    connectOrCreate?: BarberCreateOrConnectWithoutTransactionInput
    upsert?: BarberUpsertWithoutTransactionInput
    connect?: BarberWhereUniqueInput
    update?: XOR<BarberUpdateWithoutTransactionInput, BarberUncheckedUpdateWithoutTransactionInput>
  }

  export type CustomerUpdateOneRequiredWithoutTransactionNestedInput = {
    create?: XOR<CustomerCreateWithoutTransactionInput, CustomerUncheckedCreateWithoutTransactionInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutTransactionInput
    upsert?: CustomerUpsertWithoutTransactionInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<CustomerUpdateWithoutTransactionInput, CustomerUncheckedUpdateWithoutTransactionInput>
  }

  export type TransactionCreateNestedManyWithoutBarberInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutBarberInput>, Enumerable<TransactionUncheckedCreateWithoutBarberInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutBarberInput>
    createMany?: TransactionCreateManyBarberInputEnvelope
    connect?: Enumerable<TransactionWhereUniqueInput>
  }

  export type CustomerCreateNestedManyWithoutBarberInput = {
    create?: XOR<Enumerable<CustomerCreateWithoutBarberInput>, Enumerable<CustomerUncheckedCreateWithoutBarberInput>>
    connectOrCreate?: Enumerable<CustomerCreateOrConnectWithoutBarberInput>
    createMany?: CustomerCreateManyBarberInputEnvelope
    connect?: Enumerable<CustomerWhereUniqueInput>
  }

  export type AppointmentCreateNestedManyWithoutBarberInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutBarberInput>, Enumerable<AppointmentUncheckedCreateWithoutBarberInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutBarberInput>
    createMany?: AppointmentCreateManyBarberInputEnvelope
    connect?: Enumerable<AppointmentWhereUniqueInput>
  }

  export type TransactionUncheckedCreateNestedManyWithoutBarberInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutBarberInput>, Enumerable<TransactionUncheckedCreateWithoutBarberInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutBarberInput>
    createMany?: TransactionCreateManyBarberInputEnvelope
    connect?: Enumerable<TransactionWhereUniqueInput>
  }

  export type CustomerUncheckedCreateNestedManyWithoutBarberInput = {
    create?: XOR<Enumerable<CustomerCreateWithoutBarberInput>, Enumerable<CustomerUncheckedCreateWithoutBarberInput>>
    connectOrCreate?: Enumerable<CustomerCreateOrConnectWithoutBarberInput>
    createMany?: CustomerCreateManyBarberInputEnvelope
    connect?: Enumerable<CustomerWhereUniqueInput>
  }

  export type AppointmentUncheckedCreateNestedManyWithoutBarberInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutBarberInput>, Enumerable<AppointmentUncheckedCreateWithoutBarberInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutBarberInput>
    createMany?: AppointmentCreateManyBarberInputEnvelope
    connect?: Enumerable<AppointmentWhereUniqueInput>
  }

  export type TransactionUpdateManyWithoutBarberNestedInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutBarberInput>, Enumerable<TransactionUncheckedCreateWithoutBarberInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutBarberInput>
    upsert?: Enumerable<TransactionUpsertWithWhereUniqueWithoutBarberInput>
    createMany?: TransactionCreateManyBarberInputEnvelope
    set?: Enumerable<TransactionWhereUniqueInput>
    disconnect?: Enumerable<TransactionWhereUniqueInput>
    delete?: Enumerable<TransactionWhereUniqueInput>
    connect?: Enumerable<TransactionWhereUniqueInput>
    update?: Enumerable<TransactionUpdateWithWhereUniqueWithoutBarberInput>
    updateMany?: Enumerable<TransactionUpdateManyWithWhereWithoutBarberInput>
    deleteMany?: Enumerable<TransactionScalarWhereInput>
  }

  export type CustomerUpdateManyWithoutBarberNestedInput = {
    create?: XOR<Enumerable<CustomerCreateWithoutBarberInput>, Enumerable<CustomerUncheckedCreateWithoutBarberInput>>
    connectOrCreate?: Enumerable<CustomerCreateOrConnectWithoutBarberInput>
    upsert?: Enumerable<CustomerUpsertWithWhereUniqueWithoutBarberInput>
    createMany?: CustomerCreateManyBarberInputEnvelope
    set?: Enumerable<CustomerWhereUniqueInput>
    disconnect?: Enumerable<CustomerWhereUniqueInput>
    delete?: Enumerable<CustomerWhereUniqueInput>
    connect?: Enumerable<CustomerWhereUniqueInput>
    update?: Enumerable<CustomerUpdateWithWhereUniqueWithoutBarberInput>
    updateMany?: Enumerable<CustomerUpdateManyWithWhereWithoutBarberInput>
    deleteMany?: Enumerable<CustomerScalarWhereInput>
  }

  export type AppointmentUpdateManyWithoutBarberNestedInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutBarberInput>, Enumerable<AppointmentUncheckedCreateWithoutBarberInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutBarberInput>
    upsert?: Enumerable<AppointmentUpsertWithWhereUniqueWithoutBarberInput>
    createMany?: AppointmentCreateManyBarberInputEnvelope
    set?: Enumerable<AppointmentWhereUniqueInput>
    disconnect?: Enumerable<AppointmentWhereUniqueInput>
    delete?: Enumerable<AppointmentWhereUniqueInput>
    connect?: Enumerable<AppointmentWhereUniqueInput>
    update?: Enumerable<AppointmentUpdateWithWhereUniqueWithoutBarberInput>
    updateMany?: Enumerable<AppointmentUpdateManyWithWhereWithoutBarberInput>
    deleteMany?: Enumerable<AppointmentScalarWhereInput>
  }

  export type TransactionUncheckedUpdateManyWithoutBarberNestedInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutBarberInput>, Enumerable<TransactionUncheckedCreateWithoutBarberInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutBarberInput>
    upsert?: Enumerable<TransactionUpsertWithWhereUniqueWithoutBarberInput>
    createMany?: TransactionCreateManyBarberInputEnvelope
    set?: Enumerable<TransactionWhereUniqueInput>
    disconnect?: Enumerable<TransactionWhereUniqueInput>
    delete?: Enumerable<TransactionWhereUniqueInput>
    connect?: Enumerable<TransactionWhereUniqueInput>
    update?: Enumerable<TransactionUpdateWithWhereUniqueWithoutBarberInput>
    updateMany?: Enumerable<TransactionUpdateManyWithWhereWithoutBarberInput>
    deleteMany?: Enumerable<TransactionScalarWhereInput>
  }

  export type CustomerUncheckedUpdateManyWithoutBarberNestedInput = {
    create?: XOR<Enumerable<CustomerCreateWithoutBarberInput>, Enumerable<CustomerUncheckedCreateWithoutBarberInput>>
    connectOrCreate?: Enumerable<CustomerCreateOrConnectWithoutBarberInput>
    upsert?: Enumerable<CustomerUpsertWithWhereUniqueWithoutBarberInput>
    createMany?: CustomerCreateManyBarberInputEnvelope
    set?: Enumerable<CustomerWhereUniqueInput>
    disconnect?: Enumerable<CustomerWhereUniqueInput>
    delete?: Enumerable<CustomerWhereUniqueInput>
    connect?: Enumerable<CustomerWhereUniqueInput>
    update?: Enumerable<CustomerUpdateWithWhereUniqueWithoutBarberInput>
    updateMany?: Enumerable<CustomerUpdateManyWithWhereWithoutBarberInput>
    deleteMany?: Enumerable<CustomerScalarWhereInput>
  }

  export type AppointmentUncheckedUpdateManyWithoutBarberNestedInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutBarberInput>, Enumerable<AppointmentUncheckedCreateWithoutBarberInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutBarberInput>
    upsert?: Enumerable<AppointmentUpsertWithWhereUniqueWithoutBarberInput>
    createMany?: AppointmentCreateManyBarberInputEnvelope
    set?: Enumerable<AppointmentWhereUniqueInput>
    disconnect?: Enumerable<AppointmentWhereUniqueInput>
    delete?: Enumerable<AppointmentWhereUniqueInput>
    connect?: Enumerable<AppointmentWhereUniqueInput>
    update?: Enumerable<AppointmentUpdateWithWhereUniqueWithoutBarberInput>
    updateMany?: Enumerable<AppointmentUpdateManyWithWhereWithoutBarberInput>
    deleteMany?: Enumerable<AppointmentScalarWhereInput>
  }

  export type BarberCreateNestedOneWithoutCustomerInput = {
    create?: XOR<BarberCreateWithoutCustomerInput, BarberUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: BarberCreateOrConnectWithoutCustomerInput
    connect?: BarberWhereUniqueInput
  }

  export type TransactionCreateNestedManyWithoutCustomerInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutCustomerInput>, Enumerable<TransactionUncheckedCreateWithoutCustomerInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutCustomerInput>
    createMany?: TransactionCreateManyCustomerInputEnvelope
    connect?: Enumerable<TransactionWhereUniqueInput>
  }

  export type AppointmentCreateNestedManyWithoutCustomerInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutCustomerInput>, Enumerable<AppointmentUncheckedCreateWithoutCustomerInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutCustomerInput>
    createMany?: AppointmentCreateManyCustomerInputEnvelope
    connect?: Enumerable<AppointmentWhereUniqueInput>
  }

  export type TransactionUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutCustomerInput>, Enumerable<TransactionUncheckedCreateWithoutCustomerInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutCustomerInput>
    createMany?: TransactionCreateManyCustomerInputEnvelope
    connect?: Enumerable<TransactionWhereUniqueInput>
  }

  export type AppointmentUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutCustomerInput>, Enumerable<AppointmentUncheckedCreateWithoutCustomerInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutCustomerInput>
    createMany?: AppointmentCreateManyCustomerInputEnvelope
    connect?: Enumerable<AppointmentWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BarberUpdateOneRequiredWithoutCustomerNestedInput = {
    create?: XOR<BarberCreateWithoutCustomerInput, BarberUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: BarberCreateOrConnectWithoutCustomerInput
    upsert?: BarberUpsertWithoutCustomerInput
    connect?: BarberWhereUniqueInput
    update?: XOR<BarberUpdateWithoutCustomerInput, BarberUncheckedUpdateWithoutCustomerInput>
  }

  export type TransactionUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutCustomerInput>, Enumerable<TransactionUncheckedCreateWithoutCustomerInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutCustomerInput>
    upsert?: Enumerable<TransactionUpsertWithWhereUniqueWithoutCustomerInput>
    createMany?: TransactionCreateManyCustomerInputEnvelope
    set?: Enumerable<TransactionWhereUniqueInput>
    disconnect?: Enumerable<TransactionWhereUniqueInput>
    delete?: Enumerable<TransactionWhereUniqueInput>
    connect?: Enumerable<TransactionWhereUniqueInput>
    update?: Enumerable<TransactionUpdateWithWhereUniqueWithoutCustomerInput>
    updateMany?: Enumerable<TransactionUpdateManyWithWhereWithoutCustomerInput>
    deleteMany?: Enumerable<TransactionScalarWhereInput>
  }

  export type AppointmentUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutCustomerInput>, Enumerable<AppointmentUncheckedCreateWithoutCustomerInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutCustomerInput>
    upsert?: Enumerable<AppointmentUpsertWithWhereUniqueWithoutCustomerInput>
    createMany?: AppointmentCreateManyCustomerInputEnvelope
    set?: Enumerable<AppointmentWhereUniqueInput>
    disconnect?: Enumerable<AppointmentWhereUniqueInput>
    delete?: Enumerable<AppointmentWhereUniqueInput>
    connect?: Enumerable<AppointmentWhereUniqueInput>
    update?: Enumerable<AppointmentUpdateWithWhereUniqueWithoutCustomerInput>
    updateMany?: Enumerable<AppointmentUpdateManyWithWhereWithoutCustomerInput>
    deleteMany?: Enumerable<AppointmentScalarWhereInput>
  }

  export type TransactionUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutCustomerInput>, Enumerable<TransactionUncheckedCreateWithoutCustomerInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutCustomerInput>
    upsert?: Enumerable<TransactionUpsertWithWhereUniqueWithoutCustomerInput>
    createMany?: TransactionCreateManyCustomerInputEnvelope
    set?: Enumerable<TransactionWhereUniqueInput>
    disconnect?: Enumerable<TransactionWhereUniqueInput>
    delete?: Enumerable<TransactionWhereUniqueInput>
    connect?: Enumerable<TransactionWhereUniqueInput>
    update?: Enumerable<TransactionUpdateWithWhereUniqueWithoutCustomerInput>
    updateMany?: Enumerable<TransactionUpdateManyWithWhereWithoutCustomerInput>
    deleteMany?: Enumerable<TransactionScalarWhereInput>
  }

  export type AppointmentUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutCustomerInput>, Enumerable<AppointmentUncheckedCreateWithoutCustomerInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutCustomerInput>
    upsert?: Enumerable<AppointmentUpsertWithWhereUniqueWithoutCustomerInput>
    createMany?: AppointmentCreateManyCustomerInputEnvelope
    set?: Enumerable<AppointmentWhereUniqueInput>
    disconnect?: Enumerable<AppointmentWhereUniqueInput>
    delete?: Enumerable<AppointmentWhereUniqueInput>
    connect?: Enumerable<AppointmentWhereUniqueInput>
    update?: Enumerable<AppointmentUpdateWithWhereUniqueWithoutCustomerInput>
    updateMany?: Enumerable<AppointmentUpdateManyWithWhereWithoutCustomerInput>
    deleteMany?: Enumerable<AppointmentScalarWhereInput>
  }

  export type CustomerCreateNestedOneWithoutAppointmentInput = {
    create?: XOR<CustomerCreateWithoutAppointmentInput, CustomerUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutAppointmentInput
    connect?: CustomerWhereUniqueInput
  }

  export type BarberCreateNestedOneWithoutAppointmentInput = {
    create?: XOR<BarberCreateWithoutAppointmentInput, BarberUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: BarberCreateOrConnectWithoutAppointmentInput
    connect?: BarberWhereUniqueInput
  }

  export type CustomerUpdateOneRequiredWithoutAppointmentNestedInput = {
    create?: XOR<CustomerCreateWithoutAppointmentInput, CustomerUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutAppointmentInput
    upsert?: CustomerUpsertWithoutAppointmentInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<CustomerUpdateWithoutAppointmentInput, CustomerUncheckedUpdateWithoutAppointmentInput>
  }

  export type BarberUpdateOneRequiredWithoutAppointmentNestedInput = {
    create?: XOR<BarberCreateWithoutAppointmentInput, BarberUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: BarberCreateOrConnectWithoutAppointmentInput
    upsert?: BarberUpsertWithoutAppointmentInput
    connect?: BarberWhereUniqueInput
    update?: XOR<BarberUpdateWithoutAppointmentInput, BarberUncheckedUpdateWithoutAppointmentInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type BarberCreateWithoutTransactionInput = {
    barberId?: string
    firstName: string
    Customer?: CustomerCreateNestedManyWithoutBarberInput
    Appointment?: AppointmentCreateNestedManyWithoutBarberInput
  }

  export type BarberUncheckedCreateWithoutTransactionInput = {
    barberId?: string
    firstName: string
    Customer?: CustomerUncheckedCreateNestedManyWithoutBarberInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutBarberInput
  }

  export type BarberCreateOrConnectWithoutTransactionInput = {
    where: BarberWhereUniqueInput
    create: XOR<BarberCreateWithoutTransactionInput, BarberUncheckedCreateWithoutTransactionInput>
  }

  export type CustomerCreateWithoutTransactionInput = {
    customerId?: string
    firstName: string
    lastName: string
    city: string
    phoneNumber: number
    barber: BarberCreateNestedOneWithoutCustomerInput
    Appointment?: AppointmentCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutTransactionInput = {
    customerId?: string
    firstName: string
    lastName: string
    city: string
    phoneNumber: number
    ffavoriteBarber: string
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutTransactionInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutTransactionInput, CustomerUncheckedCreateWithoutTransactionInput>
  }

  export type BarberUpsertWithoutTransactionInput = {
    update: XOR<BarberUpdateWithoutTransactionInput, BarberUncheckedUpdateWithoutTransactionInput>
    create: XOR<BarberCreateWithoutTransactionInput, BarberUncheckedCreateWithoutTransactionInput>
  }

  export type BarberUpdateWithoutTransactionInput = {
    barberId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    Customer?: CustomerUpdateManyWithoutBarberNestedInput
    Appointment?: AppointmentUpdateManyWithoutBarberNestedInput
  }

  export type BarberUncheckedUpdateWithoutTransactionInput = {
    barberId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    Customer?: CustomerUncheckedUpdateManyWithoutBarberNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutBarberNestedInput
  }

  export type CustomerUpsertWithoutTransactionInput = {
    update: XOR<CustomerUpdateWithoutTransactionInput, CustomerUncheckedUpdateWithoutTransactionInput>
    create: XOR<CustomerCreateWithoutTransactionInput, CustomerUncheckedCreateWithoutTransactionInput>
  }

  export type CustomerUpdateWithoutTransactionInput = {
    customerId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phoneNumber?: IntFieldUpdateOperationsInput | number
    barber?: BarberUpdateOneRequiredWithoutCustomerNestedInput
    Appointment?: AppointmentUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutTransactionInput = {
    customerId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phoneNumber?: IntFieldUpdateOperationsInput | number
    ffavoriteBarber?: StringFieldUpdateOperationsInput | string
    Appointment?: AppointmentUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type TransactionCreateWithoutBarberInput = {
    transactionId?: string
    dateOfOrder: Date | string
    orderPrice: number
    customer: CustomerCreateNestedOneWithoutTransactionInput
  }

  export type TransactionUncheckedCreateWithoutBarberInput = {
    transactionId?: string
    fcustomerId: string
    dateOfOrder: Date | string
    orderPrice: number
  }

  export type TransactionCreateOrConnectWithoutBarberInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutBarberInput, TransactionUncheckedCreateWithoutBarberInput>
  }

  export type TransactionCreateManyBarberInputEnvelope = {
    data: Enumerable<TransactionCreateManyBarberInput>
    skipDuplicates?: boolean
  }

  export type CustomerCreateWithoutBarberInput = {
    customerId?: string
    firstName: string
    lastName: string
    city: string
    phoneNumber: number
    Transaction?: TransactionCreateNestedManyWithoutCustomerInput
    Appointment?: AppointmentCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutBarberInput = {
    customerId?: string
    firstName: string
    lastName: string
    city: string
    phoneNumber: number
    Transaction?: TransactionUncheckedCreateNestedManyWithoutCustomerInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutBarberInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutBarberInput, CustomerUncheckedCreateWithoutBarberInput>
  }

  export type CustomerCreateManyBarberInputEnvelope = {
    data: Enumerable<CustomerCreateManyBarberInput>
    skipDuplicates?: boolean
  }

  export type AppointmentCreateWithoutBarberInput = {
    appointmentDate: Date | string
    Date: Date | string
    appointmentId?: string
    customer: CustomerCreateNestedOneWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutBarberInput = {
    appointmentDate: Date | string
    Date: Date | string
    fcustomerId: string
    appointmentId?: string
  }

  export type AppointmentCreateOrConnectWithoutBarberInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutBarberInput, AppointmentUncheckedCreateWithoutBarberInput>
  }

  export type AppointmentCreateManyBarberInputEnvelope = {
    data: Enumerable<AppointmentCreateManyBarberInput>
    skipDuplicates?: boolean
  }

  export type TransactionUpsertWithWhereUniqueWithoutBarberInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutBarberInput, TransactionUncheckedUpdateWithoutBarberInput>
    create: XOR<TransactionCreateWithoutBarberInput, TransactionUncheckedCreateWithoutBarberInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutBarberInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutBarberInput, TransactionUncheckedUpdateWithoutBarberInput>
  }

  export type TransactionUpdateManyWithWhereWithoutBarberInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutTransactionInput>
  }

  export type TransactionScalarWhereInput = {
    AND?: Enumerable<TransactionScalarWhereInput>
    OR?: Enumerable<TransactionScalarWhereInput>
    NOT?: Enumerable<TransactionScalarWhereInput>
    transactionId?: StringFilter | string
    fbarberId?: StringFilter | string
    fcustomerId?: StringFilter | string
    dateOfOrder?: DateTimeFilter | Date | string
    orderPrice?: FloatFilter | number
  }

  export type CustomerUpsertWithWhereUniqueWithoutBarberInput = {
    where: CustomerWhereUniqueInput
    update: XOR<CustomerUpdateWithoutBarberInput, CustomerUncheckedUpdateWithoutBarberInput>
    create: XOR<CustomerCreateWithoutBarberInput, CustomerUncheckedCreateWithoutBarberInput>
  }

  export type CustomerUpdateWithWhereUniqueWithoutBarberInput = {
    where: CustomerWhereUniqueInput
    data: XOR<CustomerUpdateWithoutBarberInput, CustomerUncheckedUpdateWithoutBarberInput>
  }

  export type CustomerUpdateManyWithWhereWithoutBarberInput = {
    where: CustomerScalarWhereInput
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyWithoutCustomerInput>
  }

  export type CustomerScalarWhereInput = {
    AND?: Enumerable<CustomerScalarWhereInput>
    OR?: Enumerable<CustomerScalarWhereInput>
    NOT?: Enumerable<CustomerScalarWhereInput>
    customerId?: StringFilter | string
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    city?: StringFilter | string
    phoneNumber?: IntFilter | number
    ffavoriteBarber?: StringFilter | string
  }

  export type AppointmentUpsertWithWhereUniqueWithoutBarberInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutBarberInput, AppointmentUncheckedUpdateWithoutBarberInput>
    create: XOR<AppointmentCreateWithoutBarberInput, AppointmentUncheckedCreateWithoutBarberInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutBarberInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutBarberInput, AppointmentUncheckedUpdateWithoutBarberInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutBarberInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutAppointmentInput>
  }

  export type AppointmentScalarWhereInput = {
    AND?: Enumerable<AppointmentScalarWhereInput>
    OR?: Enumerable<AppointmentScalarWhereInput>
    NOT?: Enumerable<AppointmentScalarWhereInput>
    appointmentDate?: DateTimeFilter | Date | string
    Date?: DateTimeFilter | Date | string
    fcustomerId?: StringFilter | string
    fbarberId?: StringFilter | string
    appointmentId?: StringFilter | string
  }

  export type BarberCreateWithoutCustomerInput = {
    barberId?: string
    firstName: string
    Transaction?: TransactionCreateNestedManyWithoutBarberInput
    Appointment?: AppointmentCreateNestedManyWithoutBarberInput
  }

  export type BarberUncheckedCreateWithoutCustomerInput = {
    barberId?: string
    firstName: string
    Transaction?: TransactionUncheckedCreateNestedManyWithoutBarberInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutBarberInput
  }

  export type BarberCreateOrConnectWithoutCustomerInput = {
    where: BarberWhereUniqueInput
    create: XOR<BarberCreateWithoutCustomerInput, BarberUncheckedCreateWithoutCustomerInput>
  }

  export type TransactionCreateWithoutCustomerInput = {
    transactionId?: string
    dateOfOrder: Date | string
    orderPrice: number
    barber: BarberCreateNestedOneWithoutTransactionInput
  }

  export type TransactionUncheckedCreateWithoutCustomerInput = {
    transactionId?: string
    fbarberId: string
    dateOfOrder: Date | string
    orderPrice: number
  }

  export type TransactionCreateOrConnectWithoutCustomerInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutCustomerInput, TransactionUncheckedCreateWithoutCustomerInput>
  }

  export type TransactionCreateManyCustomerInputEnvelope = {
    data: Enumerable<TransactionCreateManyCustomerInput>
    skipDuplicates?: boolean
  }

  export type AppointmentCreateWithoutCustomerInput = {
    appointmentDate: Date | string
    Date: Date | string
    appointmentId?: string
    barber: BarberCreateNestedOneWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutCustomerInput = {
    appointmentDate: Date | string
    Date: Date | string
    fbarberId: string
    appointmentId?: string
  }

  export type AppointmentCreateOrConnectWithoutCustomerInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutCustomerInput, AppointmentUncheckedCreateWithoutCustomerInput>
  }

  export type AppointmentCreateManyCustomerInputEnvelope = {
    data: Enumerable<AppointmentCreateManyCustomerInput>
    skipDuplicates?: boolean
  }

  export type BarberUpsertWithoutCustomerInput = {
    update: XOR<BarberUpdateWithoutCustomerInput, BarberUncheckedUpdateWithoutCustomerInput>
    create: XOR<BarberCreateWithoutCustomerInput, BarberUncheckedCreateWithoutCustomerInput>
  }

  export type BarberUpdateWithoutCustomerInput = {
    barberId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    Transaction?: TransactionUpdateManyWithoutBarberNestedInput
    Appointment?: AppointmentUpdateManyWithoutBarberNestedInput
  }

  export type BarberUncheckedUpdateWithoutCustomerInput = {
    barberId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    Transaction?: TransactionUncheckedUpdateManyWithoutBarberNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutBarberNestedInput
  }

  export type TransactionUpsertWithWhereUniqueWithoutCustomerInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutCustomerInput, TransactionUncheckedUpdateWithoutCustomerInput>
    create: XOR<TransactionCreateWithoutCustomerInput, TransactionUncheckedCreateWithoutCustomerInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutCustomerInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutCustomerInput, TransactionUncheckedUpdateWithoutCustomerInput>
  }

  export type TransactionUpdateManyWithWhereWithoutCustomerInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutTransactionInput>
  }

  export type AppointmentUpsertWithWhereUniqueWithoutCustomerInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutCustomerInput, AppointmentUncheckedUpdateWithoutCustomerInput>
    create: XOR<AppointmentCreateWithoutCustomerInput, AppointmentUncheckedCreateWithoutCustomerInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutCustomerInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutCustomerInput, AppointmentUncheckedUpdateWithoutCustomerInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutCustomerInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutAppointmentInput>
  }

  export type CustomerCreateWithoutAppointmentInput = {
    customerId?: string
    firstName: string
    lastName: string
    city: string
    phoneNumber: number
    barber: BarberCreateNestedOneWithoutCustomerInput
    Transaction?: TransactionCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutAppointmentInput = {
    customerId?: string
    firstName: string
    lastName: string
    city: string
    phoneNumber: number
    ffavoriteBarber: string
    Transaction?: TransactionUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutAppointmentInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutAppointmentInput, CustomerUncheckedCreateWithoutAppointmentInput>
  }

  export type BarberCreateWithoutAppointmentInput = {
    barberId?: string
    firstName: string
    Transaction?: TransactionCreateNestedManyWithoutBarberInput
    Customer?: CustomerCreateNestedManyWithoutBarberInput
  }

  export type BarberUncheckedCreateWithoutAppointmentInput = {
    barberId?: string
    firstName: string
    Transaction?: TransactionUncheckedCreateNestedManyWithoutBarberInput
    Customer?: CustomerUncheckedCreateNestedManyWithoutBarberInput
  }

  export type BarberCreateOrConnectWithoutAppointmentInput = {
    where: BarberWhereUniqueInput
    create: XOR<BarberCreateWithoutAppointmentInput, BarberUncheckedCreateWithoutAppointmentInput>
  }

  export type CustomerUpsertWithoutAppointmentInput = {
    update: XOR<CustomerUpdateWithoutAppointmentInput, CustomerUncheckedUpdateWithoutAppointmentInput>
    create: XOR<CustomerCreateWithoutAppointmentInput, CustomerUncheckedCreateWithoutAppointmentInput>
  }

  export type CustomerUpdateWithoutAppointmentInput = {
    customerId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phoneNumber?: IntFieldUpdateOperationsInput | number
    barber?: BarberUpdateOneRequiredWithoutCustomerNestedInput
    Transaction?: TransactionUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutAppointmentInput = {
    customerId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phoneNumber?: IntFieldUpdateOperationsInput | number
    ffavoriteBarber?: StringFieldUpdateOperationsInput | string
    Transaction?: TransactionUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type BarberUpsertWithoutAppointmentInput = {
    update: XOR<BarberUpdateWithoutAppointmentInput, BarberUncheckedUpdateWithoutAppointmentInput>
    create: XOR<BarberCreateWithoutAppointmentInput, BarberUncheckedCreateWithoutAppointmentInput>
  }

  export type BarberUpdateWithoutAppointmentInput = {
    barberId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    Transaction?: TransactionUpdateManyWithoutBarberNestedInput
    Customer?: CustomerUpdateManyWithoutBarberNestedInput
  }

  export type BarberUncheckedUpdateWithoutAppointmentInput = {
    barberId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    Transaction?: TransactionUncheckedUpdateManyWithoutBarberNestedInput
    Customer?: CustomerUncheckedUpdateManyWithoutBarberNestedInput
  }

  export type TransactionCreateManyBarberInput = {
    transactionId?: string
    fcustomerId: string
    dateOfOrder: Date | string
    orderPrice: number
  }

  export type CustomerCreateManyBarberInput = {
    customerId?: string
    firstName: string
    lastName: string
    city: string
    phoneNumber: number
  }

  export type AppointmentCreateManyBarberInput = {
    appointmentDate: Date | string
    Date: Date | string
    fcustomerId: string
    appointmentId?: string
  }

  export type TransactionUpdateWithoutBarberInput = {
    transactionId?: StringFieldUpdateOperationsInput | string
    dateOfOrder?: DateTimeFieldUpdateOperationsInput | Date | string
    orderPrice?: FloatFieldUpdateOperationsInput | number
    customer?: CustomerUpdateOneRequiredWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateWithoutBarberInput = {
    transactionId?: StringFieldUpdateOperationsInput | string
    fcustomerId?: StringFieldUpdateOperationsInput | string
    dateOfOrder?: DateTimeFieldUpdateOperationsInput | Date | string
    orderPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type TransactionUncheckedUpdateManyWithoutTransactionInput = {
    transactionId?: StringFieldUpdateOperationsInput | string
    fcustomerId?: StringFieldUpdateOperationsInput | string
    dateOfOrder?: DateTimeFieldUpdateOperationsInput | Date | string
    orderPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type CustomerUpdateWithoutBarberInput = {
    customerId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phoneNumber?: IntFieldUpdateOperationsInput | number
    Transaction?: TransactionUpdateManyWithoutCustomerNestedInput
    Appointment?: AppointmentUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutBarberInput = {
    customerId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phoneNumber?: IntFieldUpdateOperationsInput | number
    Transaction?: TransactionUncheckedUpdateManyWithoutCustomerNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateManyWithoutCustomerInput = {
    customerId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    phoneNumber?: IntFieldUpdateOperationsInput | number
  }

  export type AppointmentUpdateWithoutBarberInput = {
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentId?: StringFieldUpdateOperationsInput | string
    customer?: CustomerUpdateOneRequiredWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutBarberInput = {
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    fcustomerId?: StringFieldUpdateOperationsInput | string
    appointmentId?: StringFieldUpdateOperationsInput | string
  }

  export type AppointmentUncheckedUpdateManyWithoutAppointmentInput = {
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    fcustomerId?: StringFieldUpdateOperationsInput | string
    appointmentId?: StringFieldUpdateOperationsInput | string
  }

  export type TransactionCreateManyCustomerInput = {
    transactionId?: string
    fbarberId: string
    dateOfOrder: Date | string
    orderPrice: number
  }

  export type AppointmentCreateManyCustomerInput = {
    appointmentDate: Date | string
    Date: Date | string
    fbarberId: string
    appointmentId?: string
  }

  export type TransactionUpdateWithoutCustomerInput = {
    transactionId?: StringFieldUpdateOperationsInput | string
    dateOfOrder?: DateTimeFieldUpdateOperationsInput | Date | string
    orderPrice?: FloatFieldUpdateOperationsInput | number
    barber?: BarberUpdateOneRequiredWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateWithoutCustomerInput = {
    transactionId?: StringFieldUpdateOperationsInput | string
    fbarberId?: StringFieldUpdateOperationsInput | string
    dateOfOrder?: DateTimeFieldUpdateOperationsInput | Date | string
    orderPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type AppointmentUpdateWithoutCustomerInput = {
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentId?: StringFieldUpdateOperationsInput | string
    barber?: BarberUpdateOneRequiredWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutCustomerInput = {
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    fbarberId?: StringFieldUpdateOperationsInput | string
    appointmentId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}