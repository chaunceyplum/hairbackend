# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = Literal['default', 'insensitive']
SortOrder = Literal['asc', 'desc']


class _DatasourceOverrideOptional(TypedDict, total=False):
    env: str
    name: str


class DatasourceOverride(_DatasourceOverrideOptional):
    url: str


# NOTE: we don't support some options as their type hints are not publicly exposed
# https://github.com/encode/httpx/discussions/1977
class HttpConfig(TypedDict, total=False):
    app: Callable[[Mapping[str, Any], Any], Any]
    http1: bool
    http2: bool
    limits: httpx.Limits
    timeout: Union[None, float, httpx.Timeout]
    trust_env: bool
    max_redirects: int


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# Appointment types

class AppointmentOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Appointment create method"""
    appointmentId: _int


class AppointmentCreateInput(AppointmentOptionalCreateInput):
    """Required arguments to the Appointment create method"""
    fcustomerId: _int
    fbarberId: _int
    Date: datetime.datetime
    appointmentDate: datetime.datetime
    phoneNumber: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class AppointmentOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Appointment create method, without relations"""
    appointmentId: _int


class AppointmentCreateWithoutRelationsInput(AppointmentOptionalCreateWithoutRelationsInput):
    """Required arguments to the Appointment create method, without relations"""
    fcustomerId: _int
    fbarberId: _int
    Date: datetime.datetime
    appointmentDate: datetime.datetime
    phoneNumber: _str


class AppointmentCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'AppointmentCreateWithoutRelationsInput'
    connect: 'AppointmentWhereUniqueInput'


class AppointmentCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['AppointmentCreateWithoutRelationsInput', List['AppointmentCreateWithoutRelationsInput']]
    connect: Union['AppointmentWhereUniqueInput', List['AppointmentWhereUniqueInput']]


_AppointmentWhereUnique_appointmentId_Input = TypedDict(
    '_AppointmentWhereUnique_appointmentId_Input',
    {
        'appointmentId': '_int',
    },
    total=True
)

AppointmentWhereUniqueInput = _AppointmentWhereUnique_appointmentId_Input


class AppointmentUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    appointmentId: Union[AtomicIntInput, _int]
    fcustomerId: Union[AtomicIntInput, _int]
    fbarberId: Union[AtomicIntInput, _int]
    Date: datetime.datetime
    appointmentDate: datetime.datetime
    phoneNumber: _str


class AppointmentUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    appointmentId: Union[AtomicIntInput, _int]
    fcustomerId: Union[AtomicIntInput, _int]
    fbarberId: Union[AtomicIntInput, _int]
    Date: datetime.datetime
    appointmentDate: datetime.datetime
    phoneNumber: _str


class AppointmentUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['AppointmentCreateWithoutRelationsInput']
    connect: List['AppointmentWhereUniqueInput']
    set: List['AppointmentWhereUniqueInput']
    disconnect: List['AppointmentWhereUniqueInput']
    delete: List['AppointmentWhereUniqueInput']

    # TODO
    # update: List['AppointmentUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['AppointmentUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['AppointmentScalarWhereInput']
    # upsert: List['AppointmentUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['AppointmentCreateOrConnectWithoutRelationsInput']


class AppointmentUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'AppointmentCreateWithoutRelationsInput'
    connect: 'AppointmentWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'AppointmentUpdateInput'
    # upsert: 'AppointmentUpsertWithoutRelationsInput'
    # connectOrCreate: 'AppointmentCreateOrConnectWithoutRelationsInput'


class AppointmentUpsertInput(TypedDict):
    create: 'AppointmentCreateInput'
    update: 'AppointmentUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Appointment_appointmentId_OrderByInput = TypedDict(
    '_Appointment_appointmentId_OrderByInput',
    {
        'appointmentId': 'SortOrder',
    },
    total=True
)

_Appointment_fcustomerId_OrderByInput = TypedDict(
    '_Appointment_fcustomerId_OrderByInput',
    {
        'fcustomerId': 'SortOrder',
    },
    total=True
)

_Appointment_fbarberId_OrderByInput = TypedDict(
    '_Appointment_fbarberId_OrderByInput',
    {
        'fbarberId': 'SortOrder',
    },
    total=True
)

_Appointment_Date_OrderByInput = TypedDict(
    '_Appointment_Date_OrderByInput',
    {
        'Date': 'SortOrder',
    },
    total=True
)

_Appointment_appointmentDate_OrderByInput = TypedDict(
    '_Appointment_appointmentDate_OrderByInput',
    {
        'appointmentDate': 'SortOrder',
    },
    total=True
)

_Appointment_phoneNumber_OrderByInput = TypedDict(
    '_Appointment_phoneNumber_OrderByInput',
    {
        'phoneNumber': 'SortOrder',
    },
    total=True
)

AppointmentOrderByInput = Union[
    '_Appointment_appointmentId_OrderByInput',
    '_Appointment_fcustomerId_OrderByInput',
    '_Appointment_fbarberId_OrderByInput',
    '_Appointment_Date_OrderByInput',
    '_Appointment_appointmentDate_OrderByInput',
    '_Appointment_phoneNumber_OrderByInput',
]



# recursive Appointment types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

AppointmentRelationFilter = TypedDict(
    'AppointmentRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class AppointmentListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class AppointmentInclude(TypedDict, total=False):
    """Appointment relational arguments"""


    

class AppointmentIncludeFromAppointment(TypedDict, total=False):
    """Relational arguments for Appointment"""


class AppointmentIncludeFromAppointmentRecursive1(TypedDict, total=False):
    """Relational arguments for Appointment"""


class AppointmentIncludeFromAppointmentRecursive2(TypedDict, total=False):
    """Relational arguments for Appointment"""


class AppointmentIncludeFromAppointmentRecursive3(TypedDict, total=False):
    """Relational arguments for Appointment"""


class AppointmentIncludeFromAppointmentRecursive4(TypedDict, total=False):
    """Relational arguments for Appointment"""

    

class AppointmentArgsFromAppointment(TypedDict, total=False):
    """Arguments for Appointment"""
    include: 'AppointmentIncludeFromAppointmentRecursive1'


class AppointmentArgsFromAppointmentRecursive1(TypedDict, total=False):
    """Arguments for Appointment"""
    include: 'AppointmentIncludeFromAppointmentRecursive2'


class AppointmentArgsFromAppointmentRecursive2(TypedDict, total=False):
    """Arguments for Appointment"""
    include: 'AppointmentIncludeFromAppointmentRecursive3'


class AppointmentArgsFromAppointmentRecursive3(TypedDict, total=False):
    """Arguments for Appointment"""
    include: 'AppointmentIncludeFromAppointmentRecursive4'


class AppointmentArgsFromAppointmentRecursive4(TypedDict, total=False):
    """Arguments for Appointment"""
    
    

class FindManyAppointmentArgsFromAppointment(TypedDict, total=False):
    """Arguments for Appointment"""
    take: int
    skip: int
    order_by: Union['AppointmentOrderByInput', List['AppointmentOrderByInput']]
    where: 'AppointmentWhereInput'
    cursor: 'AppointmentWhereUniqueInput'
    distinct: List['AppointmentScalarFieldKeys']
    include: 'AppointmentIncludeFromAppointmentRecursive1'


class FindManyAppointmentArgsFromAppointmentRecursive1(TypedDict, total=False):
    """Arguments for Appointment"""
    take: int
    skip: int
    order_by: Union['AppointmentOrderByInput', List['AppointmentOrderByInput']]
    where: 'AppointmentWhereInput'
    cursor: 'AppointmentWhereUniqueInput'
    distinct: List['AppointmentScalarFieldKeys']
    include: 'AppointmentIncludeFromAppointmentRecursive2'


class FindManyAppointmentArgsFromAppointmentRecursive2(TypedDict, total=False):
    """Arguments for Appointment"""
    take: int
    skip: int
    order_by: Union['AppointmentOrderByInput', List['AppointmentOrderByInput']]
    where: 'AppointmentWhereInput'
    cursor: 'AppointmentWhereUniqueInput'
    distinct: List['AppointmentScalarFieldKeys']
    include: 'AppointmentIncludeFromAppointmentRecursive3'


class FindManyAppointmentArgsFromAppointmentRecursive3(TypedDict, total=False):
    """Arguments for Appointment"""
    take: int
    skip: int
    order_by: Union['AppointmentOrderByInput', List['AppointmentOrderByInput']]
    where: 'AppointmentWhereInput'
    cursor: 'AppointmentWhereUniqueInput'
    distinct: List['AppointmentScalarFieldKeys']
    include: 'AppointmentIncludeFromAppointmentRecursive4'


class FindManyAppointmentArgsFromAppointmentRecursive4(TypedDict, total=False):
    """Arguments for Appointment"""
    take: int
    skip: int
    order_by: Union['AppointmentOrderByInput', List['AppointmentOrderByInput']]
    where: 'AppointmentWhereInput'
    cursor: 'AppointmentWhereUniqueInput'
    distinct: List['AppointmentScalarFieldKeys']
    
    

class BarberIncludeFromAppointment(TypedDict, total=False):
    """Relational arguments for Appointment"""


class BarberIncludeFromAppointmentRecursive1(TypedDict, total=False):
    """Relational arguments for Appointment"""


class BarberIncludeFromAppointmentRecursive2(TypedDict, total=False):
    """Relational arguments for Appointment"""


class BarberIncludeFromAppointmentRecursive3(TypedDict, total=False):
    """Relational arguments for Appointment"""


class BarberIncludeFromAppointmentRecursive4(TypedDict, total=False):
    """Relational arguments for Appointment"""

    

class BarberArgsFromAppointment(TypedDict, total=False):
    """Arguments for Appointment"""
    include: 'BarberIncludeFromBarberRecursive1'


class BarberArgsFromAppointmentRecursive1(TypedDict, total=False):
    """Arguments for Appointment"""
    include: 'BarberIncludeFromBarberRecursive2'


class BarberArgsFromAppointmentRecursive2(TypedDict, total=False):
    """Arguments for Appointment"""
    include: 'BarberIncludeFromBarberRecursive3'


class BarberArgsFromAppointmentRecursive3(TypedDict, total=False):
    """Arguments for Appointment"""
    include: 'BarberIncludeFromBarberRecursive4'


class BarberArgsFromAppointmentRecursive4(TypedDict, total=False):
    """Arguments for Appointment"""
    
    

class FindManyBarberArgsFromAppointment(TypedDict, total=False):
    """Arguments for Appointment"""
    take: int
    skip: int
    order_by: Union['BarberOrderByInput', List['BarberOrderByInput']]
    where: 'BarberWhereInput'
    cursor: 'BarberWhereUniqueInput'
    distinct: List['BarberScalarFieldKeys']
    include: 'BarberIncludeFromBarberRecursive1'


class FindManyBarberArgsFromAppointmentRecursive1(TypedDict, total=False):
    """Arguments for Appointment"""
    take: int
    skip: int
    order_by: Union['BarberOrderByInput', List['BarberOrderByInput']]
    where: 'BarberWhereInput'
    cursor: 'BarberWhereUniqueInput'
    distinct: List['BarberScalarFieldKeys']
    include: 'BarberIncludeFromBarberRecursive2'


class FindManyBarberArgsFromAppointmentRecursive2(TypedDict, total=False):
    """Arguments for Appointment"""
    take: int
    skip: int
    order_by: Union['BarberOrderByInput', List['BarberOrderByInput']]
    where: 'BarberWhereInput'
    cursor: 'BarberWhereUniqueInput'
    distinct: List['BarberScalarFieldKeys']
    include: 'BarberIncludeFromBarberRecursive3'


class FindManyBarberArgsFromAppointmentRecursive3(TypedDict, total=False):
    """Arguments for Appointment"""
    take: int
    skip: int
    order_by: Union['BarberOrderByInput', List['BarberOrderByInput']]
    where: 'BarberWhereInput'
    cursor: 'BarberWhereUniqueInput'
    distinct: List['BarberScalarFieldKeys']
    include: 'BarberIncludeFromBarberRecursive4'


class FindManyBarberArgsFromAppointmentRecursive4(TypedDict, total=False):
    """Arguments for Appointment"""
    take: int
    skip: int
    order_by: Union['BarberOrderByInput', List['BarberOrderByInput']]
    where: 'BarberWhereInput'
    cursor: 'BarberWhereUniqueInput'
    distinct: List['BarberScalarFieldKeys']
    
    

class CustomerIncludeFromAppointment(TypedDict, total=False):
    """Relational arguments for Appointment"""


class CustomerIncludeFromAppointmentRecursive1(TypedDict, total=False):
    """Relational arguments for Appointment"""


class CustomerIncludeFromAppointmentRecursive2(TypedDict, total=False):
    """Relational arguments for Appointment"""


class CustomerIncludeFromAppointmentRecursive3(TypedDict, total=False):
    """Relational arguments for Appointment"""


class CustomerIncludeFromAppointmentRecursive4(TypedDict, total=False):
    """Relational arguments for Appointment"""

    

class CustomerArgsFromAppointment(TypedDict, total=False):
    """Arguments for Appointment"""
    include: 'CustomerIncludeFromCustomerRecursive1'


class CustomerArgsFromAppointmentRecursive1(TypedDict, total=False):
    """Arguments for Appointment"""
    include: 'CustomerIncludeFromCustomerRecursive2'


class CustomerArgsFromAppointmentRecursive2(TypedDict, total=False):
    """Arguments for Appointment"""
    include: 'CustomerIncludeFromCustomerRecursive3'


class CustomerArgsFromAppointmentRecursive3(TypedDict, total=False):
    """Arguments for Appointment"""
    include: 'CustomerIncludeFromCustomerRecursive4'


class CustomerArgsFromAppointmentRecursive4(TypedDict, total=False):
    """Arguments for Appointment"""
    
    

class FindManyCustomerArgsFromAppointment(TypedDict, total=False):
    """Arguments for Appointment"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive1'


class FindManyCustomerArgsFromAppointmentRecursive1(TypedDict, total=False):
    """Arguments for Appointment"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive2'


class FindManyCustomerArgsFromAppointmentRecursive2(TypedDict, total=False):
    """Arguments for Appointment"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive3'


class FindManyCustomerArgsFromAppointmentRecursive3(TypedDict, total=False):
    """Arguments for Appointment"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive4'


class FindManyCustomerArgsFromAppointmentRecursive4(TypedDict, total=False):
    """Arguments for Appointment"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    
    

class TransactionIncludeFromAppointment(TypedDict, total=False):
    """Relational arguments for Appointment"""


class TransactionIncludeFromAppointmentRecursive1(TypedDict, total=False):
    """Relational arguments for Appointment"""


class TransactionIncludeFromAppointmentRecursive2(TypedDict, total=False):
    """Relational arguments for Appointment"""


class TransactionIncludeFromAppointmentRecursive3(TypedDict, total=False):
    """Relational arguments for Appointment"""


class TransactionIncludeFromAppointmentRecursive4(TypedDict, total=False):
    """Relational arguments for Appointment"""

    

class TransactionArgsFromAppointment(TypedDict, total=False):
    """Arguments for Appointment"""
    include: 'TransactionIncludeFromTransactionRecursive1'


class TransactionArgsFromAppointmentRecursive1(TypedDict, total=False):
    """Arguments for Appointment"""
    include: 'TransactionIncludeFromTransactionRecursive2'


class TransactionArgsFromAppointmentRecursive2(TypedDict, total=False):
    """Arguments for Appointment"""
    include: 'TransactionIncludeFromTransactionRecursive3'


class TransactionArgsFromAppointmentRecursive3(TypedDict, total=False):
    """Arguments for Appointment"""
    include: 'TransactionIncludeFromTransactionRecursive4'


class TransactionArgsFromAppointmentRecursive4(TypedDict, total=False):
    """Arguments for Appointment"""
    
    

class FindManyTransactionArgsFromAppointment(TypedDict, total=False):
    """Arguments for Appointment"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive1'


class FindManyTransactionArgsFromAppointmentRecursive1(TypedDict, total=False):
    """Arguments for Appointment"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive2'


class FindManyTransactionArgsFromAppointmentRecursive2(TypedDict, total=False):
    """Arguments for Appointment"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive3'


class FindManyTransactionArgsFromAppointmentRecursive3(TypedDict, total=False):
    """Arguments for Appointment"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive4'


class FindManyTransactionArgsFromAppointmentRecursive4(TypedDict, total=False):
    """Arguments for Appointment"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    
    

class ContactIncludeFromAppointment(TypedDict, total=False):
    """Relational arguments for Appointment"""


class ContactIncludeFromAppointmentRecursive1(TypedDict, total=False):
    """Relational arguments for Appointment"""


class ContactIncludeFromAppointmentRecursive2(TypedDict, total=False):
    """Relational arguments for Appointment"""


class ContactIncludeFromAppointmentRecursive3(TypedDict, total=False):
    """Relational arguments for Appointment"""


class ContactIncludeFromAppointmentRecursive4(TypedDict, total=False):
    """Relational arguments for Appointment"""

    

class ContactArgsFromAppointment(TypedDict, total=False):
    """Arguments for Appointment"""
    include: 'ContactIncludeFromContactRecursive1'


class ContactArgsFromAppointmentRecursive1(TypedDict, total=False):
    """Arguments for Appointment"""
    include: 'ContactIncludeFromContactRecursive2'


class ContactArgsFromAppointmentRecursive2(TypedDict, total=False):
    """Arguments for Appointment"""
    include: 'ContactIncludeFromContactRecursive3'


class ContactArgsFromAppointmentRecursive3(TypedDict, total=False):
    """Arguments for Appointment"""
    include: 'ContactIncludeFromContactRecursive4'


class ContactArgsFromAppointmentRecursive4(TypedDict, total=False):
    """Arguments for Appointment"""
    
    

class FindManyContactArgsFromAppointment(TypedDict, total=False):
    """Arguments for Appointment"""
    take: int
    skip: int
    order_by: Union['ContactOrderByInput', List['ContactOrderByInput']]
    where: 'ContactWhereInput'
    cursor: 'ContactWhereUniqueInput'
    distinct: List['ContactScalarFieldKeys']
    include: 'ContactIncludeFromContactRecursive1'


class FindManyContactArgsFromAppointmentRecursive1(TypedDict, total=False):
    """Arguments for Appointment"""
    take: int
    skip: int
    order_by: Union['ContactOrderByInput', List['ContactOrderByInput']]
    where: 'ContactWhereInput'
    cursor: 'ContactWhereUniqueInput'
    distinct: List['ContactScalarFieldKeys']
    include: 'ContactIncludeFromContactRecursive2'


class FindManyContactArgsFromAppointmentRecursive2(TypedDict, total=False):
    """Arguments for Appointment"""
    take: int
    skip: int
    order_by: Union['ContactOrderByInput', List['ContactOrderByInput']]
    where: 'ContactWhereInput'
    cursor: 'ContactWhereUniqueInput'
    distinct: List['ContactScalarFieldKeys']
    include: 'ContactIncludeFromContactRecursive3'


class FindManyContactArgsFromAppointmentRecursive3(TypedDict, total=False):
    """Arguments for Appointment"""
    take: int
    skip: int
    order_by: Union['ContactOrderByInput', List['ContactOrderByInput']]
    where: 'ContactWhereInput'
    cursor: 'ContactWhereUniqueInput'
    distinct: List['ContactScalarFieldKeys']
    include: 'ContactIncludeFromContactRecursive4'


class FindManyContactArgsFromAppointmentRecursive4(TypedDict, total=False):
    """Arguments for Appointment"""
    take: int
    skip: int
    order_by: Union['ContactOrderByInput', List['ContactOrderByInput']]
    where: 'ContactWhereInput'
    cursor: 'ContactWhereUniqueInput'
    distinct: List['ContactScalarFieldKeys']
    


FindManyAppointmentArgs = FindManyAppointmentArgsFromAppointment
FindFirstAppointmentArgs = FindManyAppointmentArgsFromAppointment


    

class AppointmentWhereInput(TypedDict, total=False):
    """Appointment arguments for searching"""
    appointmentId: Union[_int, 'types.IntFilter']
    fcustomerId: Union[_int, 'types.IntFilter']
    fbarberId: Union[_int, 'types.IntFilter']
    Date: Union[datetime.datetime, 'types.DateTimeFilter']
    appointmentDate: Union[datetime.datetime, 'types.DateTimeFilter']
    phoneNumber: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['AppointmentWhereInputRecursive1', List['AppointmentWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['AppointmentWhereInputRecursive1']
    OR: List['AppointmentWhereInputRecursive1']
    NOT: List['AppointmentWhereInputRecursive1']


class AppointmentWhereInputRecursive1(TypedDict, total=False):
    """Appointment arguments for searching"""
    appointmentId: Union[_int, 'types.IntFilter']
    fcustomerId: Union[_int, 'types.IntFilter']
    fbarberId: Union[_int, 'types.IntFilter']
    Date: Union[datetime.datetime, 'types.DateTimeFilter']
    appointmentDate: Union[datetime.datetime, 'types.DateTimeFilter']
    phoneNumber: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['AppointmentWhereInputRecursive2', List['AppointmentWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['AppointmentWhereInputRecursive2']
    OR: List['AppointmentWhereInputRecursive2']
    NOT: List['AppointmentWhereInputRecursive2']


class AppointmentWhereInputRecursive2(TypedDict, total=False):
    """Appointment arguments for searching"""
    appointmentId: Union[_int, 'types.IntFilter']
    fcustomerId: Union[_int, 'types.IntFilter']
    fbarberId: Union[_int, 'types.IntFilter']
    Date: Union[datetime.datetime, 'types.DateTimeFilter']
    appointmentDate: Union[datetime.datetime, 'types.DateTimeFilter']
    phoneNumber: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['AppointmentWhereInputRecursive3', List['AppointmentWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['AppointmentWhereInputRecursive3']
    OR: List['AppointmentWhereInputRecursive3']
    NOT: List['AppointmentWhereInputRecursive3']


class AppointmentWhereInputRecursive3(TypedDict, total=False):
    """Appointment arguments for searching"""
    appointmentId: Union[_int, 'types.IntFilter']
    fcustomerId: Union[_int, 'types.IntFilter']
    fbarberId: Union[_int, 'types.IntFilter']
    Date: Union[datetime.datetime, 'types.DateTimeFilter']
    appointmentDate: Union[datetime.datetime, 'types.DateTimeFilter']
    phoneNumber: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['AppointmentWhereInputRecursive4', List['AppointmentWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['AppointmentWhereInputRecursive4']
    OR: List['AppointmentWhereInputRecursive4']
    NOT: List['AppointmentWhereInputRecursive4']


class AppointmentWhereInputRecursive4(TypedDict, total=False):
    """Appointment arguments for searching"""
    appointmentId: Union[_int, 'types.IntFilter']
    fcustomerId: Union[_int, 'types.IntFilter']
    fbarberId: Union[_int, 'types.IntFilter']
    Date: Union[datetime.datetime, 'types.DateTimeFilter']
    appointmentDate: Union[datetime.datetime, 'types.DateTimeFilter']
    phoneNumber: Union[_str, 'types.StringFilter']



# aggregate Appointment types


    

class AppointmentScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Appointment arguments for searching"""
    appointmentId: Union[_int, 'types.IntWithAggregatesFilter']
    fcustomerId: Union[_int, 'types.IntWithAggregatesFilter']
    fbarberId: Union[_int, 'types.IntWithAggregatesFilter']
    Date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    appointmentDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    phoneNumber: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AppointmentScalarWhereWithAggregatesInputRecursive1']
    OR: List['AppointmentScalarWhereWithAggregatesInputRecursive1']
    NOT: List['AppointmentScalarWhereWithAggregatesInputRecursive1']


class AppointmentScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Appointment arguments for searching"""
    appointmentId: Union[_int, 'types.IntWithAggregatesFilter']
    fcustomerId: Union[_int, 'types.IntWithAggregatesFilter']
    fbarberId: Union[_int, 'types.IntWithAggregatesFilter']
    Date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    appointmentDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    phoneNumber: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AppointmentScalarWhereWithAggregatesInputRecursive2']
    OR: List['AppointmentScalarWhereWithAggregatesInputRecursive2']
    NOT: List['AppointmentScalarWhereWithAggregatesInputRecursive2']


class AppointmentScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Appointment arguments for searching"""
    appointmentId: Union[_int, 'types.IntWithAggregatesFilter']
    fcustomerId: Union[_int, 'types.IntWithAggregatesFilter']
    fbarberId: Union[_int, 'types.IntWithAggregatesFilter']
    Date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    appointmentDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    phoneNumber: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AppointmentScalarWhereWithAggregatesInputRecursive3']
    OR: List['AppointmentScalarWhereWithAggregatesInputRecursive3']
    NOT: List['AppointmentScalarWhereWithAggregatesInputRecursive3']


class AppointmentScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Appointment arguments for searching"""
    appointmentId: Union[_int, 'types.IntWithAggregatesFilter']
    fcustomerId: Union[_int, 'types.IntWithAggregatesFilter']
    fbarberId: Union[_int, 'types.IntWithAggregatesFilter']
    Date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    appointmentDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    phoneNumber: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AppointmentScalarWhereWithAggregatesInputRecursive4']
    OR: List['AppointmentScalarWhereWithAggregatesInputRecursive4']
    NOT: List['AppointmentScalarWhereWithAggregatesInputRecursive4']


class AppointmentScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Appointment arguments for searching"""
    appointmentId: Union[_int, 'types.IntWithAggregatesFilter']
    fcustomerId: Union[_int, 'types.IntWithAggregatesFilter']
    fbarberId: Union[_int, 'types.IntWithAggregatesFilter']
    Date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    appointmentDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    phoneNumber: Union[_str, 'types.StringWithAggregatesFilter']



class AppointmentGroupByOutput(TypedDict, total=False):
    appointmentId: _int
    fcustomerId: _int
    fbarberId: _int
    Date: datetime.datetime
    appointmentDate: datetime.datetime
    phoneNumber: _str
    _sum: 'AppointmentSumAggregateOutput'
    _avg: 'AppointmentAvgAggregateOutput'
    _min: 'AppointmentMinAggregateOutput'
    _max: 'AppointmentMaxAggregateOutput'
    _count: 'AppointmentCountAggregateOutput'


class AppointmentAvgAggregateOutput(TypedDict, total=False):
    """Appointment output for aggregating averages"""
    appointmentId: float
    fcustomerId: float
    fbarberId: float


class AppointmentSumAggregateOutput(TypedDict, total=False):
    """Appointment output for aggregating sums"""
    appointmentId: _int
    fcustomerId: _int
    fbarberId: _int


class AppointmentScalarAggregateOutput(TypedDict, total=False):
    """Appointment output including scalar fields"""
    appointmentId: _int
    fcustomerId: _int
    fbarberId: _int
    Date: datetime.datetime
    appointmentDate: datetime.datetime
    phoneNumber: _str


AppointmentMinAggregateOutput = AppointmentScalarAggregateOutput
AppointmentMaxAggregateOutput = AppointmentScalarAggregateOutput


class AppointmentMaxAggregateInput(TypedDict, total=False):
    """Appointment input for aggregating by max"""
    appointmentId: bool
    fcustomerId: bool
    fbarberId: bool
    Date: bool
    appointmentDate: bool
    phoneNumber: bool


class AppointmentMinAggregateInput(TypedDict, total=False):
    """Appointment input for aggregating by min"""
    appointmentId: bool
    fcustomerId: bool
    fbarberId: bool
    Date: bool
    appointmentDate: bool
    phoneNumber: bool


class AppointmentNumberAggregateInput(TypedDict, total=False):
    """Appointment input for aggregating numbers"""
    appointmentId: bool
    fcustomerId: bool
    fbarberId: bool


AppointmentAvgAggregateInput = AppointmentNumberAggregateInput
AppointmentSumAggregateInput = AppointmentNumberAggregateInput


AppointmentCountAggregateInput = TypedDict(
    'AppointmentCountAggregateInput',
    {
        'appointmentId': bool,
        'fcustomerId': bool,
        'fbarberId': bool,
        'Date': bool,
        'appointmentDate': bool,
        'phoneNumber': bool,
        '_all': bool,
    },
    total=False,
)

AppointmentCountAggregateOutput = TypedDict(
    'AppointmentCountAggregateOutput',
    {
        'appointmentId': int,
        'fcustomerId': int,
        'fbarberId': int,
        'Date': int,
        'appointmentDate': int,
        'phoneNumber': int,
        '_all': int,
    },
    total=False,
)


AppointmentKeys = Literal[
    'appointmentId',
    'fcustomerId',
    'fbarberId',
    'Date',
    'appointmentDate',
    'phoneNumber',
]
AppointmentScalarFieldKeys = Literal[
    'appointmentId',
    'fcustomerId',
    'fbarberId',
    'Date',
    'appointmentDate',
    'phoneNumber',
]
AppointmentScalarFieldKeysT = TypeVar('AppointmentScalarFieldKeysT', bound=AppointmentScalarFieldKeys)

AppointmentRelationalFieldKeys = _NoneType

# Barber types

class BarberOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Barber create method"""
    barberid: _int


class BarberCreateInput(BarberOptionalCreateInput):
    """Required arguments to the Barber create method"""
    firstname: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class BarberOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Barber create method, without relations"""
    barberid: _int


class BarberCreateWithoutRelationsInput(BarberOptionalCreateWithoutRelationsInput):
    """Required arguments to the Barber create method, without relations"""
    firstname: _str


class BarberCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'BarberCreateWithoutRelationsInput'
    connect: 'BarberWhereUniqueInput'


class BarberCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['BarberCreateWithoutRelationsInput', List['BarberCreateWithoutRelationsInput']]
    connect: Union['BarberWhereUniqueInput', List['BarberWhereUniqueInput']]


_BarberWhereUnique_barberid_Input = TypedDict(
    '_BarberWhereUnique_barberid_Input',
    {
        'barberid': '_int',
    },
    total=True
)

BarberWhereUniqueInput = _BarberWhereUnique_barberid_Input


class BarberUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    barberid: Union[AtomicIntInput, _int]
    firstname: _str


class BarberUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    barberid: Union[AtomicIntInput, _int]
    firstname: _str


class BarberUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['BarberCreateWithoutRelationsInput']
    connect: List['BarberWhereUniqueInput']
    set: List['BarberWhereUniqueInput']
    disconnect: List['BarberWhereUniqueInput']
    delete: List['BarberWhereUniqueInput']

    # TODO
    # update: List['BarberUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['BarberUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['BarberScalarWhereInput']
    # upsert: List['BarberUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['BarberCreateOrConnectWithoutRelationsInput']


class BarberUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'BarberCreateWithoutRelationsInput'
    connect: 'BarberWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'BarberUpdateInput'
    # upsert: 'BarberUpsertWithoutRelationsInput'
    # connectOrCreate: 'BarberCreateOrConnectWithoutRelationsInput'


class BarberUpsertInput(TypedDict):
    create: 'BarberCreateInput'
    update: 'BarberUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Barber_barberid_OrderByInput = TypedDict(
    '_Barber_barberid_OrderByInput',
    {
        'barberid': 'SortOrder',
    },
    total=True
)

_Barber_firstname_OrderByInput = TypedDict(
    '_Barber_firstname_OrderByInput',
    {
        'firstname': 'SortOrder',
    },
    total=True
)

BarberOrderByInput = Union[
    '_Barber_barberid_OrderByInput',
    '_Barber_firstname_OrderByInput',
]



# recursive Barber types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

BarberRelationFilter = TypedDict(
    'BarberRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class BarberListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class BarberInclude(TypedDict, total=False):
    """Barber relational arguments"""


    

class AppointmentIncludeFromBarber(TypedDict, total=False):
    """Relational arguments for Barber"""


class AppointmentIncludeFromBarberRecursive1(TypedDict, total=False):
    """Relational arguments for Barber"""


class AppointmentIncludeFromBarberRecursive2(TypedDict, total=False):
    """Relational arguments for Barber"""


class AppointmentIncludeFromBarberRecursive3(TypedDict, total=False):
    """Relational arguments for Barber"""


class AppointmentIncludeFromBarberRecursive4(TypedDict, total=False):
    """Relational arguments for Barber"""

    

class AppointmentArgsFromBarber(TypedDict, total=False):
    """Arguments for Barber"""
    include: 'AppointmentIncludeFromAppointmentRecursive1'


class AppointmentArgsFromBarberRecursive1(TypedDict, total=False):
    """Arguments for Barber"""
    include: 'AppointmentIncludeFromAppointmentRecursive2'


class AppointmentArgsFromBarberRecursive2(TypedDict, total=False):
    """Arguments for Barber"""
    include: 'AppointmentIncludeFromAppointmentRecursive3'


class AppointmentArgsFromBarberRecursive3(TypedDict, total=False):
    """Arguments for Barber"""
    include: 'AppointmentIncludeFromAppointmentRecursive4'


class AppointmentArgsFromBarberRecursive4(TypedDict, total=False):
    """Arguments for Barber"""
    
    

class FindManyAppointmentArgsFromBarber(TypedDict, total=False):
    """Arguments for Barber"""
    take: int
    skip: int
    order_by: Union['AppointmentOrderByInput', List['AppointmentOrderByInput']]
    where: 'AppointmentWhereInput'
    cursor: 'AppointmentWhereUniqueInput'
    distinct: List['AppointmentScalarFieldKeys']
    include: 'AppointmentIncludeFromAppointmentRecursive1'


class FindManyAppointmentArgsFromBarberRecursive1(TypedDict, total=False):
    """Arguments for Barber"""
    take: int
    skip: int
    order_by: Union['AppointmentOrderByInput', List['AppointmentOrderByInput']]
    where: 'AppointmentWhereInput'
    cursor: 'AppointmentWhereUniqueInput'
    distinct: List['AppointmentScalarFieldKeys']
    include: 'AppointmentIncludeFromAppointmentRecursive2'


class FindManyAppointmentArgsFromBarberRecursive2(TypedDict, total=False):
    """Arguments for Barber"""
    take: int
    skip: int
    order_by: Union['AppointmentOrderByInput', List['AppointmentOrderByInput']]
    where: 'AppointmentWhereInput'
    cursor: 'AppointmentWhereUniqueInput'
    distinct: List['AppointmentScalarFieldKeys']
    include: 'AppointmentIncludeFromAppointmentRecursive3'


class FindManyAppointmentArgsFromBarberRecursive3(TypedDict, total=False):
    """Arguments for Barber"""
    take: int
    skip: int
    order_by: Union['AppointmentOrderByInput', List['AppointmentOrderByInput']]
    where: 'AppointmentWhereInput'
    cursor: 'AppointmentWhereUniqueInput'
    distinct: List['AppointmentScalarFieldKeys']
    include: 'AppointmentIncludeFromAppointmentRecursive4'


class FindManyAppointmentArgsFromBarberRecursive4(TypedDict, total=False):
    """Arguments for Barber"""
    take: int
    skip: int
    order_by: Union['AppointmentOrderByInput', List['AppointmentOrderByInput']]
    where: 'AppointmentWhereInput'
    cursor: 'AppointmentWhereUniqueInput'
    distinct: List['AppointmentScalarFieldKeys']
    
    

class BarberIncludeFromBarber(TypedDict, total=False):
    """Relational arguments for Barber"""


class BarberIncludeFromBarberRecursive1(TypedDict, total=False):
    """Relational arguments for Barber"""


class BarberIncludeFromBarberRecursive2(TypedDict, total=False):
    """Relational arguments for Barber"""


class BarberIncludeFromBarberRecursive3(TypedDict, total=False):
    """Relational arguments for Barber"""


class BarberIncludeFromBarberRecursive4(TypedDict, total=False):
    """Relational arguments for Barber"""

    

class BarberArgsFromBarber(TypedDict, total=False):
    """Arguments for Barber"""
    include: 'BarberIncludeFromBarberRecursive1'


class BarberArgsFromBarberRecursive1(TypedDict, total=False):
    """Arguments for Barber"""
    include: 'BarberIncludeFromBarberRecursive2'


class BarberArgsFromBarberRecursive2(TypedDict, total=False):
    """Arguments for Barber"""
    include: 'BarberIncludeFromBarberRecursive3'


class BarberArgsFromBarberRecursive3(TypedDict, total=False):
    """Arguments for Barber"""
    include: 'BarberIncludeFromBarberRecursive4'


class BarberArgsFromBarberRecursive4(TypedDict, total=False):
    """Arguments for Barber"""
    
    

class FindManyBarberArgsFromBarber(TypedDict, total=False):
    """Arguments for Barber"""
    take: int
    skip: int
    order_by: Union['BarberOrderByInput', List['BarberOrderByInput']]
    where: 'BarberWhereInput'
    cursor: 'BarberWhereUniqueInput'
    distinct: List['BarberScalarFieldKeys']
    include: 'BarberIncludeFromBarberRecursive1'


class FindManyBarberArgsFromBarberRecursive1(TypedDict, total=False):
    """Arguments for Barber"""
    take: int
    skip: int
    order_by: Union['BarberOrderByInput', List['BarberOrderByInput']]
    where: 'BarberWhereInput'
    cursor: 'BarberWhereUniqueInput'
    distinct: List['BarberScalarFieldKeys']
    include: 'BarberIncludeFromBarberRecursive2'


class FindManyBarberArgsFromBarberRecursive2(TypedDict, total=False):
    """Arguments for Barber"""
    take: int
    skip: int
    order_by: Union['BarberOrderByInput', List['BarberOrderByInput']]
    where: 'BarberWhereInput'
    cursor: 'BarberWhereUniqueInput'
    distinct: List['BarberScalarFieldKeys']
    include: 'BarberIncludeFromBarberRecursive3'


class FindManyBarberArgsFromBarberRecursive3(TypedDict, total=False):
    """Arguments for Barber"""
    take: int
    skip: int
    order_by: Union['BarberOrderByInput', List['BarberOrderByInput']]
    where: 'BarberWhereInput'
    cursor: 'BarberWhereUniqueInput'
    distinct: List['BarberScalarFieldKeys']
    include: 'BarberIncludeFromBarberRecursive4'


class FindManyBarberArgsFromBarberRecursive4(TypedDict, total=False):
    """Arguments for Barber"""
    take: int
    skip: int
    order_by: Union['BarberOrderByInput', List['BarberOrderByInput']]
    where: 'BarberWhereInput'
    cursor: 'BarberWhereUniqueInput'
    distinct: List['BarberScalarFieldKeys']
    
    

class CustomerIncludeFromBarber(TypedDict, total=False):
    """Relational arguments for Barber"""


class CustomerIncludeFromBarberRecursive1(TypedDict, total=False):
    """Relational arguments for Barber"""


class CustomerIncludeFromBarberRecursive2(TypedDict, total=False):
    """Relational arguments for Barber"""


class CustomerIncludeFromBarberRecursive3(TypedDict, total=False):
    """Relational arguments for Barber"""


class CustomerIncludeFromBarberRecursive4(TypedDict, total=False):
    """Relational arguments for Barber"""

    

class CustomerArgsFromBarber(TypedDict, total=False):
    """Arguments for Barber"""
    include: 'CustomerIncludeFromCustomerRecursive1'


class CustomerArgsFromBarberRecursive1(TypedDict, total=False):
    """Arguments for Barber"""
    include: 'CustomerIncludeFromCustomerRecursive2'


class CustomerArgsFromBarberRecursive2(TypedDict, total=False):
    """Arguments for Barber"""
    include: 'CustomerIncludeFromCustomerRecursive3'


class CustomerArgsFromBarberRecursive3(TypedDict, total=False):
    """Arguments for Barber"""
    include: 'CustomerIncludeFromCustomerRecursive4'


class CustomerArgsFromBarberRecursive4(TypedDict, total=False):
    """Arguments for Barber"""
    
    

class FindManyCustomerArgsFromBarber(TypedDict, total=False):
    """Arguments for Barber"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive1'


class FindManyCustomerArgsFromBarberRecursive1(TypedDict, total=False):
    """Arguments for Barber"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive2'


class FindManyCustomerArgsFromBarberRecursive2(TypedDict, total=False):
    """Arguments for Barber"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive3'


class FindManyCustomerArgsFromBarberRecursive3(TypedDict, total=False):
    """Arguments for Barber"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive4'


class FindManyCustomerArgsFromBarberRecursive4(TypedDict, total=False):
    """Arguments for Barber"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    
    

class TransactionIncludeFromBarber(TypedDict, total=False):
    """Relational arguments for Barber"""


class TransactionIncludeFromBarberRecursive1(TypedDict, total=False):
    """Relational arguments for Barber"""


class TransactionIncludeFromBarberRecursive2(TypedDict, total=False):
    """Relational arguments for Barber"""


class TransactionIncludeFromBarberRecursive3(TypedDict, total=False):
    """Relational arguments for Barber"""


class TransactionIncludeFromBarberRecursive4(TypedDict, total=False):
    """Relational arguments for Barber"""

    

class TransactionArgsFromBarber(TypedDict, total=False):
    """Arguments for Barber"""
    include: 'TransactionIncludeFromTransactionRecursive1'


class TransactionArgsFromBarberRecursive1(TypedDict, total=False):
    """Arguments for Barber"""
    include: 'TransactionIncludeFromTransactionRecursive2'


class TransactionArgsFromBarberRecursive2(TypedDict, total=False):
    """Arguments for Barber"""
    include: 'TransactionIncludeFromTransactionRecursive3'


class TransactionArgsFromBarberRecursive3(TypedDict, total=False):
    """Arguments for Barber"""
    include: 'TransactionIncludeFromTransactionRecursive4'


class TransactionArgsFromBarberRecursive4(TypedDict, total=False):
    """Arguments for Barber"""
    
    

class FindManyTransactionArgsFromBarber(TypedDict, total=False):
    """Arguments for Barber"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive1'


class FindManyTransactionArgsFromBarberRecursive1(TypedDict, total=False):
    """Arguments for Barber"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive2'


class FindManyTransactionArgsFromBarberRecursive2(TypedDict, total=False):
    """Arguments for Barber"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive3'


class FindManyTransactionArgsFromBarberRecursive3(TypedDict, total=False):
    """Arguments for Barber"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive4'


class FindManyTransactionArgsFromBarberRecursive4(TypedDict, total=False):
    """Arguments for Barber"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    
    

class ContactIncludeFromBarber(TypedDict, total=False):
    """Relational arguments for Barber"""


class ContactIncludeFromBarberRecursive1(TypedDict, total=False):
    """Relational arguments for Barber"""


class ContactIncludeFromBarberRecursive2(TypedDict, total=False):
    """Relational arguments for Barber"""


class ContactIncludeFromBarberRecursive3(TypedDict, total=False):
    """Relational arguments for Barber"""


class ContactIncludeFromBarberRecursive4(TypedDict, total=False):
    """Relational arguments for Barber"""

    

class ContactArgsFromBarber(TypedDict, total=False):
    """Arguments for Barber"""
    include: 'ContactIncludeFromContactRecursive1'


class ContactArgsFromBarberRecursive1(TypedDict, total=False):
    """Arguments for Barber"""
    include: 'ContactIncludeFromContactRecursive2'


class ContactArgsFromBarberRecursive2(TypedDict, total=False):
    """Arguments for Barber"""
    include: 'ContactIncludeFromContactRecursive3'


class ContactArgsFromBarberRecursive3(TypedDict, total=False):
    """Arguments for Barber"""
    include: 'ContactIncludeFromContactRecursive4'


class ContactArgsFromBarberRecursive4(TypedDict, total=False):
    """Arguments for Barber"""
    
    

class FindManyContactArgsFromBarber(TypedDict, total=False):
    """Arguments for Barber"""
    take: int
    skip: int
    order_by: Union['ContactOrderByInput', List['ContactOrderByInput']]
    where: 'ContactWhereInput'
    cursor: 'ContactWhereUniqueInput'
    distinct: List['ContactScalarFieldKeys']
    include: 'ContactIncludeFromContactRecursive1'


class FindManyContactArgsFromBarberRecursive1(TypedDict, total=False):
    """Arguments for Barber"""
    take: int
    skip: int
    order_by: Union['ContactOrderByInput', List['ContactOrderByInput']]
    where: 'ContactWhereInput'
    cursor: 'ContactWhereUniqueInput'
    distinct: List['ContactScalarFieldKeys']
    include: 'ContactIncludeFromContactRecursive2'


class FindManyContactArgsFromBarberRecursive2(TypedDict, total=False):
    """Arguments for Barber"""
    take: int
    skip: int
    order_by: Union['ContactOrderByInput', List['ContactOrderByInput']]
    where: 'ContactWhereInput'
    cursor: 'ContactWhereUniqueInput'
    distinct: List['ContactScalarFieldKeys']
    include: 'ContactIncludeFromContactRecursive3'


class FindManyContactArgsFromBarberRecursive3(TypedDict, total=False):
    """Arguments for Barber"""
    take: int
    skip: int
    order_by: Union['ContactOrderByInput', List['ContactOrderByInput']]
    where: 'ContactWhereInput'
    cursor: 'ContactWhereUniqueInput'
    distinct: List['ContactScalarFieldKeys']
    include: 'ContactIncludeFromContactRecursive4'


class FindManyContactArgsFromBarberRecursive4(TypedDict, total=False):
    """Arguments for Barber"""
    take: int
    skip: int
    order_by: Union['ContactOrderByInput', List['ContactOrderByInput']]
    where: 'ContactWhereInput'
    cursor: 'ContactWhereUniqueInput'
    distinct: List['ContactScalarFieldKeys']
    


FindManyBarberArgs = FindManyBarberArgsFromBarber
FindFirstBarberArgs = FindManyBarberArgsFromBarber


    

class BarberWhereInput(TypedDict, total=False):
    """Barber arguments for searching"""
    barberid: Union[_int, 'types.IntFilter']
    firstname: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['BarberWhereInputRecursive1', List['BarberWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['BarberWhereInputRecursive1']
    OR: List['BarberWhereInputRecursive1']
    NOT: List['BarberWhereInputRecursive1']


class BarberWhereInputRecursive1(TypedDict, total=False):
    """Barber arguments for searching"""
    barberid: Union[_int, 'types.IntFilter']
    firstname: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['BarberWhereInputRecursive2', List['BarberWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['BarberWhereInputRecursive2']
    OR: List['BarberWhereInputRecursive2']
    NOT: List['BarberWhereInputRecursive2']


class BarberWhereInputRecursive2(TypedDict, total=False):
    """Barber arguments for searching"""
    barberid: Union[_int, 'types.IntFilter']
    firstname: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['BarberWhereInputRecursive3', List['BarberWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['BarberWhereInputRecursive3']
    OR: List['BarberWhereInputRecursive3']
    NOT: List['BarberWhereInputRecursive3']


class BarberWhereInputRecursive3(TypedDict, total=False):
    """Barber arguments for searching"""
    barberid: Union[_int, 'types.IntFilter']
    firstname: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['BarberWhereInputRecursive4', List['BarberWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['BarberWhereInputRecursive4']
    OR: List['BarberWhereInputRecursive4']
    NOT: List['BarberWhereInputRecursive4']


class BarberWhereInputRecursive4(TypedDict, total=False):
    """Barber arguments for searching"""
    barberid: Union[_int, 'types.IntFilter']
    firstname: Union[_str, 'types.StringFilter']



# aggregate Barber types


    

class BarberScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Barber arguments for searching"""
    barberid: Union[_int, 'types.IntWithAggregatesFilter']
    firstname: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['BarberScalarWhereWithAggregatesInputRecursive1']
    OR: List['BarberScalarWhereWithAggregatesInputRecursive1']
    NOT: List['BarberScalarWhereWithAggregatesInputRecursive1']


class BarberScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Barber arguments for searching"""
    barberid: Union[_int, 'types.IntWithAggregatesFilter']
    firstname: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['BarberScalarWhereWithAggregatesInputRecursive2']
    OR: List['BarberScalarWhereWithAggregatesInputRecursive2']
    NOT: List['BarberScalarWhereWithAggregatesInputRecursive2']


class BarberScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Barber arguments for searching"""
    barberid: Union[_int, 'types.IntWithAggregatesFilter']
    firstname: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['BarberScalarWhereWithAggregatesInputRecursive3']
    OR: List['BarberScalarWhereWithAggregatesInputRecursive3']
    NOT: List['BarberScalarWhereWithAggregatesInputRecursive3']


class BarberScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Barber arguments for searching"""
    barberid: Union[_int, 'types.IntWithAggregatesFilter']
    firstname: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['BarberScalarWhereWithAggregatesInputRecursive4']
    OR: List['BarberScalarWhereWithAggregatesInputRecursive4']
    NOT: List['BarberScalarWhereWithAggregatesInputRecursive4']


class BarberScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Barber arguments for searching"""
    barberid: Union[_int, 'types.IntWithAggregatesFilter']
    firstname: Union[_str, 'types.StringWithAggregatesFilter']



class BarberGroupByOutput(TypedDict, total=False):
    barberid: _int
    firstname: _str
    _sum: 'BarberSumAggregateOutput'
    _avg: 'BarberAvgAggregateOutput'
    _min: 'BarberMinAggregateOutput'
    _max: 'BarberMaxAggregateOutput'
    _count: 'BarberCountAggregateOutput'


class BarberAvgAggregateOutput(TypedDict, total=False):
    """Barber output for aggregating averages"""
    barberid: float


class BarberSumAggregateOutput(TypedDict, total=False):
    """Barber output for aggregating sums"""
    barberid: _int


class BarberScalarAggregateOutput(TypedDict, total=False):
    """Barber output including scalar fields"""
    barberid: _int
    firstname: _str


BarberMinAggregateOutput = BarberScalarAggregateOutput
BarberMaxAggregateOutput = BarberScalarAggregateOutput


class BarberMaxAggregateInput(TypedDict, total=False):
    """Barber input for aggregating by max"""
    barberid: bool
    firstname: bool


class BarberMinAggregateInput(TypedDict, total=False):
    """Barber input for aggregating by min"""
    barberid: bool
    firstname: bool


class BarberNumberAggregateInput(TypedDict, total=False):
    """Barber input for aggregating numbers"""
    barberid: bool


BarberAvgAggregateInput = BarberNumberAggregateInput
BarberSumAggregateInput = BarberNumberAggregateInput


BarberCountAggregateInput = TypedDict(
    'BarberCountAggregateInput',
    {
        'barberid': bool,
        'firstname': bool,
        '_all': bool,
    },
    total=False,
)

BarberCountAggregateOutput = TypedDict(
    'BarberCountAggregateOutput',
    {
        'barberid': int,
        'firstname': int,
        '_all': int,
    },
    total=False,
)


BarberKeys = Literal[
    'barberid',
    'firstname',
]
BarberScalarFieldKeys = Literal[
    'barberid',
    'firstname',
]
BarberScalarFieldKeysT = TypeVar('BarberScalarFieldKeysT', bound=BarberScalarFieldKeys)

BarberRelationalFieldKeys = _NoneType

# Customer types

class CustomerOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Customer create method"""
    customerId: _int
    ffavoriteBarber: _int
    isLoggedIn: _bool


class CustomerCreateInput(CustomerOptionalCreateInput):
    """Required arguments to the Customer create method"""
    firstName: _str
    lastName: _str
    city: _str
    phoneNumber: _str
    email: _str
    password: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CustomerOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Customer create method, without relations"""
    customerId: _int
    ffavoriteBarber: _int
    isLoggedIn: _bool


class CustomerCreateWithoutRelationsInput(CustomerOptionalCreateWithoutRelationsInput):
    """Required arguments to the Customer create method, without relations"""
    firstName: _str
    lastName: _str
    city: _str
    phoneNumber: _str
    email: _str
    password: _str


class CustomerCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CustomerCreateWithoutRelationsInput'
    connect: 'CustomerWhereUniqueInput'


class CustomerCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CustomerCreateWithoutRelationsInput', List['CustomerCreateWithoutRelationsInput']]
    connect: Union['CustomerWhereUniqueInput', List['CustomerWhereUniqueInput']]


_CustomerWhereUnique_customerId_Input = TypedDict(
    '_CustomerWhereUnique_customerId_Input',
    {
        'customerId': '_int',
    },
    total=True
)

_CustomerWhereUnique_email_Input = TypedDict(
    '_CustomerWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

_CustomerCompoundcustomerId_phoneNumberKeyInner = TypedDict(
    '_CustomerCompoundcustomerId_phoneNumberKeyInner',
    {
        'customerId': '_int',
        'phoneNumber': '_str',
    },
    total=True
)

_CustomerCompoundcustomerId_phoneNumberKey = TypedDict(
    '_CustomerCompoundcustomerId_phoneNumberKey',
    {
        'customerId_phoneNumber': '_CustomerCompoundcustomerId_phoneNumberKeyInner',
    },
    total=True
)

CustomerWhereUniqueInput = Union[
    '_CustomerWhereUnique_customerId_Input',
    '_CustomerWhereUnique_email_Input',
    '_CustomerCompoundcustomerId_phoneNumberKey',
]


class CustomerUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    customerId: Union[AtomicIntInput, _int]
    firstName: _str
    lastName: _str
    city: _str
    phoneNumber: _str
    ffavoriteBarber: Union[AtomicIntInput, _int]
    email: _str
    password: _str
    isLoggedIn: _bool


class CustomerUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    customerId: Union[AtomicIntInput, _int]
    firstName: _str
    lastName: _str
    city: _str
    phoneNumber: _str
    ffavoriteBarber: Union[AtomicIntInput, _int]
    email: _str
    password: _str
    isLoggedIn: _bool


class CustomerUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CustomerCreateWithoutRelationsInput']
    connect: List['CustomerWhereUniqueInput']
    set: List['CustomerWhereUniqueInput']
    disconnect: List['CustomerWhereUniqueInput']
    delete: List['CustomerWhereUniqueInput']

    # TODO
    # update: List['CustomerUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CustomerUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CustomerScalarWhereInput']
    # upsert: List['CustomerUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['CustomerCreateOrConnectWithoutRelationsInput']


class CustomerUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CustomerCreateWithoutRelationsInput'
    connect: 'CustomerWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CustomerUpdateInput'
    # upsert: 'CustomerUpsertWithoutRelationsInput'
    # connectOrCreate: 'CustomerCreateOrConnectWithoutRelationsInput'


class CustomerUpsertInput(TypedDict):
    create: 'CustomerCreateInput'
    update: 'CustomerUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Customer_customerId_OrderByInput = TypedDict(
    '_Customer_customerId_OrderByInput',
    {
        'customerId': 'SortOrder',
    },
    total=True
)

_Customer_firstName_OrderByInput = TypedDict(
    '_Customer_firstName_OrderByInput',
    {
        'firstName': 'SortOrder',
    },
    total=True
)

_Customer_lastName_OrderByInput = TypedDict(
    '_Customer_lastName_OrderByInput',
    {
        'lastName': 'SortOrder',
    },
    total=True
)

_Customer_city_OrderByInput = TypedDict(
    '_Customer_city_OrderByInput',
    {
        'city': 'SortOrder',
    },
    total=True
)

_Customer_phoneNumber_OrderByInput = TypedDict(
    '_Customer_phoneNumber_OrderByInput',
    {
        'phoneNumber': 'SortOrder',
    },
    total=True
)

_Customer_ffavoriteBarber_OrderByInput = TypedDict(
    '_Customer_ffavoriteBarber_OrderByInput',
    {
        'ffavoriteBarber': 'SortOrder',
    },
    total=True
)

_Customer_email_OrderByInput = TypedDict(
    '_Customer_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_Customer_password_OrderByInput = TypedDict(
    '_Customer_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_Customer_isLoggedIn_OrderByInput = TypedDict(
    '_Customer_isLoggedIn_OrderByInput',
    {
        'isLoggedIn': 'SortOrder',
    },
    total=True
)

CustomerOrderByInput = Union[
    '_Customer_customerId_OrderByInput',
    '_Customer_firstName_OrderByInput',
    '_Customer_lastName_OrderByInput',
    '_Customer_city_OrderByInput',
    '_Customer_phoneNumber_OrderByInput',
    '_Customer_ffavoriteBarber_OrderByInput',
    '_Customer_email_OrderByInput',
    '_Customer_password_OrderByInput',
    '_Customer_isLoggedIn_OrderByInput',
]



# recursive Customer types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

CustomerRelationFilter = TypedDict(
    'CustomerRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class CustomerListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class CustomerInclude(TypedDict, total=False):
    """Customer relational arguments"""


    

class AppointmentIncludeFromCustomer(TypedDict, total=False):
    """Relational arguments for Customer"""


class AppointmentIncludeFromCustomerRecursive1(TypedDict, total=False):
    """Relational arguments for Customer"""


class AppointmentIncludeFromCustomerRecursive2(TypedDict, total=False):
    """Relational arguments for Customer"""


class AppointmentIncludeFromCustomerRecursive3(TypedDict, total=False):
    """Relational arguments for Customer"""


class AppointmentIncludeFromCustomerRecursive4(TypedDict, total=False):
    """Relational arguments for Customer"""

    

class AppointmentArgsFromCustomer(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'AppointmentIncludeFromAppointmentRecursive1'


class AppointmentArgsFromCustomerRecursive1(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'AppointmentIncludeFromAppointmentRecursive2'


class AppointmentArgsFromCustomerRecursive2(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'AppointmentIncludeFromAppointmentRecursive3'


class AppointmentArgsFromCustomerRecursive3(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'AppointmentIncludeFromAppointmentRecursive4'


class AppointmentArgsFromCustomerRecursive4(TypedDict, total=False):
    """Arguments for Customer"""
    
    

class FindManyAppointmentArgsFromCustomer(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['AppointmentOrderByInput', List['AppointmentOrderByInput']]
    where: 'AppointmentWhereInput'
    cursor: 'AppointmentWhereUniqueInput'
    distinct: List['AppointmentScalarFieldKeys']
    include: 'AppointmentIncludeFromAppointmentRecursive1'


class FindManyAppointmentArgsFromCustomerRecursive1(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['AppointmentOrderByInput', List['AppointmentOrderByInput']]
    where: 'AppointmentWhereInput'
    cursor: 'AppointmentWhereUniqueInput'
    distinct: List['AppointmentScalarFieldKeys']
    include: 'AppointmentIncludeFromAppointmentRecursive2'


class FindManyAppointmentArgsFromCustomerRecursive2(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['AppointmentOrderByInput', List['AppointmentOrderByInput']]
    where: 'AppointmentWhereInput'
    cursor: 'AppointmentWhereUniqueInput'
    distinct: List['AppointmentScalarFieldKeys']
    include: 'AppointmentIncludeFromAppointmentRecursive3'


class FindManyAppointmentArgsFromCustomerRecursive3(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['AppointmentOrderByInput', List['AppointmentOrderByInput']]
    where: 'AppointmentWhereInput'
    cursor: 'AppointmentWhereUniqueInput'
    distinct: List['AppointmentScalarFieldKeys']
    include: 'AppointmentIncludeFromAppointmentRecursive4'


class FindManyAppointmentArgsFromCustomerRecursive4(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['AppointmentOrderByInput', List['AppointmentOrderByInput']]
    where: 'AppointmentWhereInput'
    cursor: 'AppointmentWhereUniqueInput'
    distinct: List['AppointmentScalarFieldKeys']
    
    

class BarberIncludeFromCustomer(TypedDict, total=False):
    """Relational arguments for Customer"""


class BarberIncludeFromCustomerRecursive1(TypedDict, total=False):
    """Relational arguments for Customer"""


class BarberIncludeFromCustomerRecursive2(TypedDict, total=False):
    """Relational arguments for Customer"""


class BarberIncludeFromCustomerRecursive3(TypedDict, total=False):
    """Relational arguments for Customer"""


class BarberIncludeFromCustomerRecursive4(TypedDict, total=False):
    """Relational arguments for Customer"""

    

class BarberArgsFromCustomer(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'BarberIncludeFromBarberRecursive1'


class BarberArgsFromCustomerRecursive1(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'BarberIncludeFromBarberRecursive2'


class BarberArgsFromCustomerRecursive2(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'BarberIncludeFromBarberRecursive3'


class BarberArgsFromCustomerRecursive3(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'BarberIncludeFromBarberRecursive4'


class BarberArgsFromCustomerRecursive4(TypedDict, total=False):
    """Arguments for Customer"""
    
    

class FindManyBarberArgsFromCustomer(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['BarberOrderByInput', List['BarberOrderByInput']]
    where: 'BarberWhereInput'
    cursor: 'BarberWhereUniqueInput'
    distinct: List['BarberScalarFieldKeys']
    include: 'BarberIncludeFromBarberRecursive1'


class FindManyBarberArgsFromCustomerRecursive1(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['BarberOrderByInput', List['BarberOrderByInput']]
    where: 'BarberWhereInput'
    cursor: 'BarberWhereUniqueInput'
    distinct: List['BarberScalarFieldKeys']
    include: 'BarberIncludeFromBarberRecursive2'


class FindManyBarberArgsFromCustomerRecursive2(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['BarberOrderByInput', List['BarberOrderByInput']]
    where: 'BarberWhereInput'
    cursor: 'BarberWhereUniqueInput'
    distinct: List['BarberScalarFieldKeys']
    include: 'BarberIncludeFromBarberRecursive3'


class FindManyBarberArgsFromCustomerRecursive3(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['BarberOrderByInput', List['BarberOrderByInput']]
    where: 'BarberWhereInput'
    cursor: 'BarberWhereUniqueInput'
    distinct: List['BarberScalarFieldKeys']
    include: 'BarberIncludeFromBarberRecursive4'


class FindManyBarberArgsFromCustomerRecursive4(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['BarberOrderByInput', List['BarberOrderByInput']]
    where: 'BarberWhereInput'
    cursor: 'BarberWhereUniqueInput'
    distinct: List['BarberScalarFieldKeys']
    
    

class CustomerIncludeFromCustomer(TypedDict, total=False):
    """Relational arguments for Customer"""


class CustomerIncludeFromCustomerRecursive1(TypedDict, total=False):
    """Relational arguments for Customer"""


class CustomerIncludeFromCustomerRecursive2(TypedDict, total=False):
    """Relational arguments for Customer"""


class CustomerIncludeFromCustomerRecursive3(TypedDict, total=False):
    """Relational arguments for Customer"""


class CustomerIncludeFromCustomerRecursive4(TypedDict, total=False):
    """Relational arguments for Customer"""

    

class CustomerArgsFromCustomer(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'CustomerIncludeFromCustomerRecursive1'


class CustomerArgsFromCustomerRecursive1(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'CustomerIncludeFromCustomerRecursive2'


class CustomerArgsFromCustomerRecursive2(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'CustomerIncludeFromCustomerRecursive3'


class CustomerArgsFromCustomerRecursive3(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'CustomerIncludeFromCustomerRecursive4'


class CustomerArgsFromCustomerRecursive4(TypedDict, total=False):
    """Arguments for Customer"""
    
    

class FindManyCustomerArgsFromCustomer(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive1'


class FindManyCustomerArgsFromCustomerRecursive1(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive2'


class FindManyCustomerArgsFromCustomerRecursive2(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive3'


class FindManyCustomerArgsFromCustomerRecursive3(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive4'


class FindManyCustomerArgsFromCustomerRecursive4(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    
    

class TransactionIncludeFromCustomer(TypedDict, total=False):
    """Relational arguments for Customer"""


class TransactionIncludeFromCustomerRecursive1(TypedDict, total=False):
    """Relational arguments for Customer"""


class TransactionIncludeFromCustomerRecursive2(TypedDict, total=False):
    """Relational arguments for Customer"""


class TransactionIncludeFromCustomerRecursive3(TypedDict, total=False):
    """Relational arguments for Customer"""


class TransactionIncludeFromCustomerRecursive4(TypedDict, total=False):
    """Relational arguments for Customer"""

    

class TransactionArgsFromCustomer(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'TransactionIncludeFromTransactionRecursive1'


class TransactionArgsFromCustomerRecursive1(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'TransactionIncludeFromTransactionRecursive2'


class TransactionArgsFromCustomerRecursive2(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'TransactionIncludeFromTransactionRecursive3'


class TransactionArgsFromCustomerRecursive3(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'TransactionIncludeFromTransactionRecursive4'


class TransactionArgsFromCustomerRecursive4(TypedDict, total=False):
    """Arguments for Customer"""
    
    

class FindManyTransactionArgsFromCustomer(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive1'


class FindManyTransactionArgsFromCustomerRecursive1(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive2'


class FindManyTransactionArgsFromCustomerRecursive2(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive3'


class FindManyTransactionArgsFromCustomerRecursive3(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive4'


class FindManyTransactionArgsFromCustomerRecursive4(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    
    

class ContactIncludeFromCustomer(TypedDict, total=False):
    """Relational arguments for Customer"""


class ContactIncludeFromCustomerRecursive1(TypedDict, total=False):
    """Relational arguments for Customer"""


class ContactIncludeFromCustomerRecursive2(TypedDict, total=False):
    """Relational arguments for Customer"""


class ContactIncludeFromCustomerRecursive3(TypedDict, total=False):
    """Relational arguments for Customer"""


class ContactIncludeFromCustomerRecursive4(TypedDict, total=False):
    """Relational arguments for Customer"""

    

class ContactArgsFromCustomer(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'ContactIncludeFromContactRecursive1'


class ContactArgsFromCustomerRecursive1(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'ContactIncludeFromContactRecursive2'


class ContactArgsFromCustomerRecursive2(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'ContactIncludeFromContactRecursive3'


class ContactArgsFromCustomerRecursive3(TypedDict, total=False):
    """Arguments for Customer"""
    include: 'ContactIncludeFromContactRecursive4'


class ContactArgsFromCustomerRecursive4(TypedDict, total=False):
    """Arguments for Customer"""
    
    

class FindManyContactArgsFromCustomer(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['ContactOrderByInput', List['ContactOrderByInput']]
    where: 'ContactWhereInput'
    cursor: 'ContactWhereUniqueInput'
    distinct: List['ContactScalarFieldKeys']
    include: 'ContactIncludeFromContactRecursive1'


class FindManyContactArgsFromCustomerRecursive1(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['ContactOrderByInput', List['ContactOrderByInput']]
    where: 'ContactWhereInput'
    cursor: 'ContactWhereUniqueInput'
    distinct: List['ContactScalarFieldKeys']
    include: 'ContactIncludeFromContactRecursive2'


class FindManyContactArgsFromCustomerRecursive2(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['ContactOrderByInput', List['ContactOrderByInput']]
    where: 'ContactWhereInput'
    cursor: 'ContactWhereUniqueInput'
    distinct: List['ContactScalarFieldKeys']
    include: 'ContactIncludeFromContactRecursive3'


class FindManyContactArgsFromCustomerRecursive3(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['ContactOrderByInput', List['ContactOrderByInput']]
    where: 'ContactWhereInput'
    cursor: 'ContactWhereUniqueInput'
    distinct: List['ContactScalarFieldKeys']
    include: 'ContactIncludeFromContactRecursive4'


class FindManyContactArgsFromCustomerRecursive4(TypedDict, total=False):
    """Arguments for Customer"""
    take: int
    skip: int
    order_by: Union['ContactOrderByInput', List['ContactOrderByInput']]
    where: 'ContactWhereInput'
    cursor: 'ContactWhereUniqueInput'
    distinct: List['ContactScalarFieldKeys']
    


FindManyCustomerArgs = FindManyCustomerArgsFromCustomer
FindFirstCustomerArgs = FindManyCustomerArgsFromCustomer


    

class CustomerWhereInput(TypedDict, total=False):
    """Customer arguments for searching"""
    customerId: Union[_int, 'types.IntFilter']
    firstName: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    city: Union[_str, 'types.StringFilter']
    phoneNumber: Union[_str, 'types.StringFilter']
    ffavoriteBarber: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    isLoggedIn: Union[_bool, 'types.BooleanFilter']

    # should be noted that AND and NOT should be Union['CustomerWhereInputRecursive1', List['CustomerWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['CustomerWhereInputRecursive1']
    OR: List['CustomerWhereInputRecursive1']
    NOT: List['CustomerWhereInputRecursive1']


class CustomerWhereInputRecursive1(TypedDict, total=False):
    """Customer arguments for searching"""
    customerId: Union[_int, 'types.IntFilter']
    firstName: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    city: Union[_str, 'types.StringFilter']
    phoneNumber: Union[_str, 'types.StringFilter']
    ffavoriteBarber: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    isLoggedIn: Union[_bool, 'types.BooleanFilter']

    # should be noted that AND and NOT should be Union['CustomerWhereInputRecursive2', List['CustomerWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['CustomerWhereInputRecursive2']
    OR: List['CustomerWhereInputRecursive2']
    NOT: List['CustomerWhereInputRecursive2']


class CustomerWhereInputRecursive2(TypedDict, total=False):
    """Customer arguments for searching"""
    customerId: Union[_int, 'types.IntFilter']
    firstName: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    city: Union[_str, 'types.StringFilter']
    phoneNumber: Union[_str, 'types.StringFilter']
    ffavoriteBarber: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    isLoggedIn: Union[_bool, 'types.BooleanFilter']

    # should be noted that AND and NOT should be Union['CustomerWhereInputRecursive3', List['CustomerWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['CustomerWhereInputRecursive3']
    OR: List['CustomerWhereInputRecursive3']
    NOT: List['CustomerWhereInputRecursive3']


class CustomerWhereInputRecursive3(TypedDict, total=False):
    """Customer arguments for searching"""
    customerId: Union[_int, 'types.IntFilter']
    firstName: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    city: Union[_str, 'types.StringFilter']
    phoneNumber: Union[_str, 'types.StringFilter']
    ffavoriteBarber: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    isLoggedIn: Union[_bool, 'types.BooleanFilter']

    # should be noted that AND and NOT should be Union['CustomerWhereInputRecursive4', List['CustomerWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['CustomerWhereInputRecursive4']
    OR: List['CustomerWhereInputRecursive4']
    NOT: List['CustomerWhereInputRecursive4']


class CustomerWhereInputRecursive4(TypedDict, total=False):
    """Customer arguments for searching"""
    customerId: Union[_int, 'types.IntFilter']
    firstName: Union[_str, 'types.StringFilter']
    lastName: Union[_str, 'types.StringFilter']
    city: Union[_str, 'types.StringFilter']
    phoneNumber: Union[_str, 'types.StringFilter']
    ffavoriteBarber: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    isLoggedIn: Union[_bool, 'types.BooleanFilter']



# aggregate Customer types


    

class CustomerScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Customer arguments for searching"""
    customerId: Union[_int, 'types.IntWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    phoneNumber: Union[_str, 'types.StringWithAggregatesFilter']
    ffavoriteBarber: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    isLoggedIn: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['CustomerScalarWhereWithAggregatesInputRecursive1']
    OR: List['CustomerScalarWhereWithAggregatesInputRecursive1']
    NOT: List['CustomerScalarWhereWithAggregatesInputRecursive1']


class CustomerScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Customer arguments for searching"""
    customerId: Union[_int, 'types.IntWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    phoneNumber: Union[_str, 'types.StringWithAggregatesFilter']
    ffavoriteBarber: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    isLoggedIn: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['CustomerScalarWhereWithAggregatesInputRecursive2']
    OR: List['CustomerScalarWhereWithAggregatesInputRecursive2']
    NOT: List['CustomerScalarWhereWithAggregatesInputRecursive2']


class CustomerScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Customer arguments for searching"""
    customerId: Union[_int, 'types.IntWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    phoneNumber: Union[_str, 'types.StringWithAggregatesFilter']
    ffavoriteBarber: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    isLoggedIn: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['CustomerScalarWhereWithAggregatesInputRecursive3']
    OR: List['CustomerScalarWhereWithAggregatesInputRecursive3']
    NOT: List['CustomerScalarWhereWithAggregatesInputRecursive3']


class CustomerScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Customer arguments for searching"""
    customerId: Union[_int, 'types.IntWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    phoneNumber: Union[_str, 'types.StringWithAggregatesFilter']
    ffavoriteBarber: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    isLoggedIn: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['CustomerScalarWhereWithAggregatesInputRecursive4']
    OR: List['CustomerScalarWhereWithAggregatesInputRecursive4']
    NOT: List['CustomerScalarWhereWithAggregatesInputRecursive4']


class CustomerScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Customer arguments for searching"""
    customerId: Union[_int, 'types.IntWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    lastName: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    phoneNumber: Union[_str, 'types.StringWithAggregatesFilter']
    ffavoriteBarber: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    isLoggedIn: Union[_bool, 'types.BooleanWithAggregatesFilter']



class CustomerGroupByOutput(TypedDict, total=False):
    customerId: _int
    firstName: _str
    lastName: _str
    city: _str
    phoneNumber: _str
    ffavoriteBarber: _int
    email: _str
    password: _str
    isLoggedIn: _bool
    _sum: 'CustomerSumAggregateOutput'
    _avg: 'CustomerAvgAggregateOutput'
    _min: 'CustomerMinAggregateOutput'
    _max: 'CustomerMaxAggregateOutput'
    _count: 'CustomerCountAggregateOutput'


class CustomerAvgAggregateOutput(TypedDict, total=False):
    """Customer output for aggregating averages"""
    customerId: float
    ffavoriteBarber: float


class CustomerSumAggregateOutput(TypedDict, total=False):
    """Customer output for aggregating sums"""
    customerId: _int
    ffavoriteBarber: _int


class CustomerScalarAggregateOutput(TypedDict, total=False):
    """Customer output including scalar fields"""
    customerId: _int
    firstName: _str
    lastName: _str
    city: _str
    phoneNumber: _str
    ffavoriteBarber: _int
    email: _str
    password: _str
    isLoggedIn: _bool


CustomerMinAggregateOutput = CustomerScalarAggregateOutput
CustomerMaxAggregateOutput = CustomerScalarAggregateOutput


class CustomerMaxAggregateInput(TypedDict, total=False):
    """Customer input for aggregating by max"""
    customerId: bool
    firstName: bool
    lastName: bool
    city: bool
    phoneNumber: bool
    ffavoriteBarber: bool
    email: bool
    password: bool
    isLoggedIn: bool


class CustomerMinAggregateInput(TypedDict, total=False):
    """Customer input for aggregating by min"""
    customerId: bool
    firstName: bool
    lastName: bool
    city: bool
    phoneNumber: bool
    ffavoriteBarber: bool
    email: bool
    password: bool
    isLoggedIn: bool


class CustomerNumberAggregateInput(TypedDict, total=False):
    """Customer input for aggregating numbers"""
    customerId: bool
    ffavoriteBarber: bool


CustomerAvgAggregateInput = CustomerNumberAggregateInput
CustomerSumAggregateInput = CustomerNumberAggregateInput


CustomerCountAggregateInput = TypedDict(
    'CustomerCountAggregateInput',
    {
        'customerId': bool,
        'firstName': bool,
        'lastName': bool,
        'city': bool,
        'phoneNumber': bool,
        'ffavoriteBarber': bool,
        'email': bool,
        'password': bool,
        'isLoggedIn': bool,
        '_all': bool,
    },
    total=False,
)

CustomerCountAggregateOutput = TypedDict(
    'CustomerCountAggregateOutput',
    {
        'customerId': int,
        'firstName': int,
        'lastName': int,
        'city': int,
        'phoneNumber': int,
        'ffavoriteBarber': int,
        'email': int,
        'password': int,
        'isLoggedIn': int,
        '_all': int,
    },
    total=False,
)


CustomerKeys = Literal[
    'customerId',
    'firstName',
    'lastName',
    'city',
    'phoneNumber',
    'ffavoriteBarber',
    'email',
    'password',
    'isLoggedIn',
]
CustomerScalarFieldKeys = Literal[
    'customerId',
    'firstName',
    'lastName',
    'city',
    'phoneNumber',
    'ffavoriteBarber',
    'email',
    'password',
    'isLoggedIn',
]
CustomerScalarFieldKeysT = TypeVar('CustomerScalarFieldKeysT', bound=CustomerScalarFieldKeys)

CustomerRelationalFieldKeys = _NoneType

# Transaction types

class TransactionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Transaction create method"""
    transactionId: _int
    Date: datetime.datetime


class TransactionCreateInput(TransactionOptionalCreateInput):
    """Required arguments to the Transaction create method"""
    fcustomerId: _int
    orderPrice: _int
    fbarberId: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class TransactionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Transaction create method, without relations"""
    transactionId: _int
    Date: datetime.datetime


class TransactionCreateWithoutRelationsInput(TransactionOptionalCreateWithoutRelationsInput):
    """Required arguments to the Transaction create method, without relations"""
    fcustomerId: _int
    orderPrice: _int
    fbarberId: _int


class TransactionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'TransactionCreateWithoutRelationsInput'
    connect: 'TransactionWhereUniqueInput'


class TransactionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['TransactionCreateWithoutRelationsInput', List['TransactionCreateWithoutRelationsInput']]
    connect: Union['TransactionWhereUniqueInput', List['TransactionWhereUniqueInput']]


_TransactionWhereUnique_transactionId_Input = TypedDict(
    '_TransactionWhereUnique_transactionId_Input',
    {
        'transactionId': '_int',
    },
    total=True
)

TransactionWhereUniqueInput = _TransactionWhereUnique_transactionId_Input


class TransactionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    transactionId: Union[AtomicIntInput, _int]
    fcustomerId: Union[AtomicIntInput, _int]
    orderPrice: Union[AtomicIntInput, _int]
    fbarberId: Union[AtomicIntInput, _int]
    Date: datetime.datetime


class TransactionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    transactionId: Union[AtomicIntInput, _int]
    fcustomerId: Union[AtomicIntInput, _int]
    orderPrice: Union[AtomicIntInput, _int]
    fbarberId: Union[AtomicIntInput, _int]
    Date: datetime.datetime


class TransactionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['TransactionCreateWithoutRelationsInput']
    connect: List['TransactionWhereUniqueInput']
    set: List['TransactionWhereUniqueInput']
    disconnect: List['TransactionWhereUniqueInput']
    delete: List['TransactionWhereUniqueInput']

    # TODO
    # update: List['TransactionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['TransactionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['TransactionScalarWhereInput']
    # upsert: List['TransactionUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['TransactionCreateOrConnectWithoutRelationsInput']


class TransactionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'TransactionCreateWithoutRelationsInput'
    connect: 'TransactionWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'TransactionUpdateInput'
    # upsert: 'TransactionUpsertWithoutRelationsInput'
    # connectOrCreate: 'TransactionCreateOrConnectWithoutRelationsInput'


class TransactionUpsertInput(TypedDict):
    create: 'TransactionCreateInput'
    update: 'TransactionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Transaction_transactionId_OrderByInput = TypedDict(
    '_Transaction_transactionId_OrderByInput',
    {
        'transactionId': 'SortOrder',
    },
    total=True
)

_Transaction_fcustomerId_OrderByInput = TypedDict(
    '_Transaction_fcustomerId_OrderByInput',
    {
        'fcustomerId': 'SortOrder',
    },
    total=True
)

_Transaction_orderPrice_OrderByInput = TypedDict(
    '_Transaction_orderPrice_OrderByInput',
    {
        'orderPrice': 'SortOrder',
    },
    total=True
)

_Transaction_fbarberId_OrderByInput = TypedDict(
    '_Transaction_fbarberId_OrderByInput',
    {
        'fbarberId': 'SortOrder',
    },
    total=True
)

_Transaction_Date_OrderByInput = TypedDict(
    '_Transaction_Date_OrderByInput',
    {
        'Date': 'SortOrder',
    },
    total=True
)

TransactionOrderByInput = Union[
    '_Transaction_transactionId_OrderByInput',
    '_Transaction_fcustomerId_OrderByInput',
    '_Transaction_orderPrice_OrderByInput',
    '_Transaction_fbarberId_OrderByInput',
    '_Transaction_Date_OrderByInput',
]



# recursive Transaction types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

TransactionRelationFilter = TypedDict(
    'TransactionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class TransactionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class TransactionInclude(TypedDict, total=False):
    """Transaction relational arguments"""


    

class AppointmentIncludeFromTransaction(TypedDict, total=False):
    """Relational arguments for Transaction"""


class AppointmentIncludeFromTransactionRecursive1(TypedDict, total=False):
    """Relational arguments for Transaction"""


class AppointmentIncludeFromTransactionRecursive2(TypedDict, total=False):
    """Relational arguments for Transaction"""


class AppointmentIncludeFromTransactionRecursive3(TypedDict, total=False):
    """Relational arguments for Transaction"""


class AppointmentIncludeFromTransactionRecursive4(TypedDict, total=False):
    """Relational arguments for Transaction"""

    

class AppointmentArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'AppointmentIncludeFromAppointmentRecursive1'


class AppointmentArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'AppointmentIncludeFromAppointmentRecursive2'


class AppointmentArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'AppointmentIncludeFromAppointmentRecursive3'


class AppointmentArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'AppointmentIncludeFromAppointmentRecursive4'


class AppointmentArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    
    

class FindManyAppointmentArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['AppointmentOrderByInput', List['AppointmentOrderByInput']]
    where: 'AppointmentWhereInput'
    cursor: 'AppointmentWhereUniqueInput'
    distinct: List['AppointmentScalarFieldKeys']
    include: 'AppointmentIncludeFromAppointmentRecursive1'


class FindManyAppointmentArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['AppointmentOrderByInput', List['AppointmentOrderByInput']]
    where: 'AppointmentWhereInput'
    cursor: 'AppointmentWhereUniqueInput'
    distinct: List['AppointmentScalarFieldKeys']
    include: 'AppointmentIncludeFromAppointmentRecursive2'


class FindManyAppointmentArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['AppointmentOrderByInput', List['AppointmentOrderByInput']]
    where: 'AppointmentWhereInput'
    cursor: 'AppointmentWhereUniqueInput'
    distinct: List['AppointmentScalarFieldKeys']
    include: 'AppointmentIncludeFromAppointmentRecursive3'


class FindManyAppointmentArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['AppointmentOrderByInput', List['AppointmentOrderByInput']]
    where: 'AppointmentWhereInput'
    cursor: 'AppointmentWhereUniqueInput'
    distinct: List['AppointmentScalarFieldKeys']
    include: 'AppointmentIncludeFromAppointmentRecursive4'


class FindManyAppointmentArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['AppointmentOrderByInput', List['AppointmentOrderByInput']]
    where: 'AppointmentWhereInput'
    cursor: 'AppointmentWhereUniqueInput'
    distinct: List['AppointmentScalarFieldKeys']
    
    

class BarberIncludeFromTransaction(TypedDict, total=False):
    """Relational arguments for Transaction"""


class BarberIncludeFromTransactionRecursive1(TypedDict, total=False):
    """Relational arguments for Transaction"""


class BarberIncludeFromTransactionRecursive2(TypedDict, total=False):
    """Relational arguments for Transaction"""


class BarberIncludeFromTransactionRecursive3(TypedDict, total=False):
    """Relational arguments for Transaction"""


class BarberIncludeFromTransactionRecursive4(TypedDict, total=False):
    """Relational arguments for Transaction"""

    

class BarberArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'BarberIncludeFromBarberRecursive1'


class BarberArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'BarberIncludeFromBarberRecursive2'


class BarberArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'BarberIncludeFromBarberRecursive3'


class BarberArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'BarberIncludeFromBarberRecursive4'


class BarberArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    
    

class FindManyBarberArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['BarberOrderByInput', List['BarberOrderByInput']]
    where: 'BarberWhereInput'
    cursor: 'BarberWhereUniqueInput'
    distinct: List['BarberScalarFieldKeys']
    include: 'BarberIncludeFromBarberRecursive1'


class FindManyBarberArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['BarberOrderByInput', List['BarberOrderByInput']]
    where: 'BarberWhereInput'
    cursor: 'BarberWhereUniqueInput'
    distinct: List['BarberScalarFieldKeys']
    include: 'BarberIncludeFromBarberRecursive2'


class FindManyBarberArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['BarberOrderByInput', List['BarberOrderByInput']]
    where: 'BarberWhereInput'
    cursor: 'BarberWhereUniqueInput'
    distinct: List['BarberScalarFieldKeys']
    include: 'BarberIncludeFromBarberRecursive3'


class FindManyBarberArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['BarberOrderByInput', List['BarberOrderByInput']]
    where: 'BarberWhereInput'
    cursor: 'BarberWhereUniqueInput'
    distinct: List['BarberScalarFieldKeys']
    include: 'BarberIncludeFromBarberRecursive4'


class FindManyBarberArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['BarberOrderByInput', List['BarberOrderByInput']]
    where: 'BarberWhereInput'
    cursor: 'BarberWhereUniqueInput'
    distinct: List['BarberScalarFieldKeys']
    
    

class CustomerIncludeFromTransaction(TypedDict, total=False):
    """Relational arguments for Transaction"""


class CustomerIncludeFromTransactionRecursive1(TypedDict, total=False):
    """Relational arguments for Transaction"""


class CustomerIncludeFromTransactionRecursive2(TypedDict, total=False):
    """Relational arguments for Transaction"""


class CustomerIncludeFromTransactionRecursive3(TypedDict, total=False):
    """Relational arguments for Transaction"""


class CustomerIncludeFromTransactionRecursive4(TypedDict, total=False):
    """Relational arguments for Transaction"""

    

class CustomerArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'CustomerIncludeFromCustomerRecursive1'


class CustomerArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'CustomerIncludeFromCustomerRecursive2'


class CustomerArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'CustomerIncludeFromCustomerRecursive3'


class CustomerArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'CustomerIncludeFromCustomerRecursive4'


class CustomerArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    
    

class FindManyCustomerArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive1'


class FindManyCustomerArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive2'


class FindManyCustomerArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive3'


class FindManyCustomerArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive4'


class FindManyCustomerArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    
    

class TransactionIncludeFromTransaction(TypedDict, total=False):
    """Relational arguments for Transaction"""


class TransactionIncludeFromTransactionRecursive1(TypedDict, total=False):
    """Relational arguments for Transaction"""


class TransactionIncludeFromTransactionRecursive2(TypedDict, total=False):
    """Relational arguments for Transaction"""


class TransactionIncludeFromTransactionRecursive3(TypedDict, total=False):
    """Relational arguments for Transaction"""


class TransactionIncludeFromTransactionRecursive4(TypedDict, total=False):
    """Relational arguments for Transaction"""

    

class TransactionArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'TransactionIncludeFromTransactionRecursive1'


class TransactionArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'TransactionIncludeFromTransactionRecursive2'


class TransactionArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'TransactionIncludeFromTransactionRecursive3'


class TransactionArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'TransactionIncludeFromTransactionRecursive4'


class TransactionArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    
    

class FindManyTransactionArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive1'


class FindManyTransactionArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive2'


class FindManyTransactionArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive3'


class FindManyTransactionArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive4'


class FindManyTransactionArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    
    

class ContactIncludeFromTransaction(TypedDict, total=False):
    """Relational arguments for Transaction"""


class ContactIncludeFromTransactionRecursive1(TypedDict, total=False):
    """Relational arguments for Transaction"""


class ContactIncludeFromTransactionRecursive2(TypedDict, total=False):
    """Relational arguments for Transaction"""


class ContactIncludeFromTransactionRecursive3(TypedDict, total=False):
    """Relational arguments for Transaction"""


class ContactIncludeFromTransactionRecursive4(TypedDict, total=False):
    """Relational arguments for Transaction"""

    

class ContactArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'ContactIncludeFromContactRecursive1'


class ContactArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'ContactIncludeFromContactRecursive2'


class ContactArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'ContactIncludeFromContactRecursive3'


class ContactArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'ContactIncludeFromContactRecursive4'


class ContactArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    
    

class FindManyContactArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['ContactOrderByInput', List['ContactOrderByInput']]
    where: 'ContactWhereInput'
    cursor: 'ContactWhereUniqueInput'
    distinct: List['ContactScalarFieldKeys']
    include: 'ContactIncludeFromContactRecursive1'


class FindManyContactArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['ContactOrderByInput', List['ContactOrderByInput']]
    where: 'ContactWhereInput'
    cursor: 'ContactWhereUniqueInput'
    distinct: List['ContactScalarFieldKeys']
    include: 'ContactIncludeFromContactRecursive2'


class FindManyContactArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['ContactOrderByInput', List['ContactOrderByInput']]
    where: 'ContactWhereInput'
    cursor: 'ContactWhereUniqueInput'
    distinct: List['ContactScalarFieldKeys']
    include: 'ContactIncludeFromContactRecursive3'


class FindManyContactArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['ContactOrderByInput', List['ContactOrderByInput']]
    where: 'ContactWhereInput'
    cursor: 'ContactWhereUniqueInput'
    distinct: List['ContactScalarFieldKeys']
    include: 'ContactIncludeFromContactRecursive4'


class FindManyContactArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['ContactOrderByInput', List['ContactOrderByInput']]
    where: 'ContactWhereInput'
    cursor: 'ContactWhereUniqueInput'
    distinct: List['ContactScalarFieldKeys']
    


FindManyTransactionArgs = FindManyTransactionArgsFromTransaction
FindFirstTransactionArgs = FindManyTransactionArgsFromTransaction


    

class TransactionWhereInput(TypedDict, total=False):
    """Transaction arguments for searching"""
    transactionId: Union[_int, 'types.IntFilter']
    fcustomerId: Union[_int, 'types.IntFilter']
    orderPrice: Union[_int, 'types.IntFilter']
    fbarberId: Union[_int, 'types.IntFilter']
    Date: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['TransactionWhereInputRecursive1', List['TransactionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['TransactionWhereInputRecursive1']
    OR: List['TransactionWhereInputRecursive1']
    NOT: List['TransactionWhereInputRecursive1']


class TransactionWhereInputRecursive1(TypedDict, total=False):
    """Transaction arguments for searching"""
    transactionId: Union[_int, 'types.IntFilter']
    fcustomerId: Union[_int, 'types.IntFilter']
    orderPrice: Union[_int, 'types.IntFilter']
    fbarberId: Union[_int, 'types.IntFilter']
    Date: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['TransactionWhereInputRecursive2', List['TransactionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['TransactionWhereInputRecursive2']
    OR: List['TransactionWhereInputRecursive2']
    NOT: List['TransactionWhereInputRecursive2']


class TransactionWhereInputRecursive2(TypedDict, total=False):
    """Transaction arguments for searching"""
    transactionId: Union[_int, 'types.IntFilter']
    fcustomerId: Union[_int, 'types.IntFilter']
    orderPrice: Union[_int, 'types.IntFilter']
    fbarberId: Union[_int, 'types.IntFilter']
    Date: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['TransactionWhereInputRecursive3', List['TransactionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['TransactionWhereInputRecursive3']
    OR: List['TransactionWhereInputRecursive3']
    NOT: List['TransactionWhereInputRecursive3']


class TransactionWhereInputRecursive3(TypedDict, total=False):
    """Transaction arguments for searching"""
    transactionId: Union[_int, 'types.IntFilter']
    fcustomerId: Union[_int, 'types.IntFilter']
    orderPrice: Union[_int, 'types.IntFilter']
    fbarberId: Union[_int, 'types.IntFilter']
    Date: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['TransactionWhereInputRecursive4', List['TransactionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['TransactionWhereInputRecursive4']
    OR: List['TransactionWhereInputRecursive4']
    NOT: List['TransactionWhereInputRecursive4']


class TransactionWhereInputRecursive4(TypedDict, total=False):
    """Transaction arguments for searching"""
    transactionId: Union[_int, 'types.IntFilter']
    fcustomerId: Union[_int, 'types.IntFilter']
    orderPrice: Union[_int, 'types.IntFilter']
    fbarberId: Union[_int, 'types.IntFilter']
    Date: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Transaction types


    

class TransactionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Transaction arguments for searching"""
    transactionId: Union[_int, 'types.IntWithAggregatesFilter']
    fcustomerId: Union[_int, 'types.IntWithAggregatesFilter']
    orderPrice: Union[_int, 'types.IntWithAggregatesFilter']
    fbarberId: Union[_int, 'types.IntWithAggregatesFilter']
    Date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['TransactionScalarWhereWithAggregatesInputRecursive1']
    OR: List['TransactionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['TransactionScalarWhereWithAggregatesInputRecursive1']


class TransactionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Transaction arguments for searching"""
    transactionId: Union[_int, 'types.IntWithAggregatesFilter']
    fcustomerId: Union[_int, 'types.IntWithAggregatesFilter']
    orderPrice: Union[_int, 'types.IntWithAggregatesFilter']
    fbarberId: Union[_int, 'types.IntWithAggregatesFilter']
    Date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['TransactionScalarWhereWithAggregatesInputRecursive2']
    OR: List['TransactionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['TransactionScalarWhereWithAggregatesInputRecursive2']


class TransactionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Transaction arguments for searching"""
    transactionId: Union[_int, 'types.IntWithAggregatesFilter']
    fcustomerId: Union[_int, 'types.IntWithAggregatesFilter']
    orderPrice: Union[_int, 'types.IntWithAggregatesFilter']
    fbarberId: Union[_int, 'types.IntWithAggregatesFilter']
    Date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['TransactionScalarWhereWithAggregatesInputRecursive3']
    OR: List['TransactionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['TransactionScalarWhereWithAggregatesInputRecursive3']


class TransactionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Transaction arguments for searching"""
    transactionId: Union[_int, 'types.IntWithAggregatesFilter']
    fcustomerId: Union[_int, 'types.IntWithAggregatesFilter']
    orderPrice: Union[_int, 'types.IntWithAggregatesFilter']
    fbarberId: Union[_int, 'types.IntWithAggregatesFilter']
    Date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['TransactionScalarWhereWithAggregatesInputRecursive4']
    OR: List['TransactionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['TransactionScalarWhereWithAggregatesInputRecursive4']


class TransactionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Transaction arguments for searching"""
    transactionId: Union[_int, 'types.IntWithAggregatesFilter']
    fcustomerId: Union[_int, 'types.IntWithAggregatesFilter']
    orderPrice: Union[_int, 'types.IntWithAggregatesFilter']
    fbarberId: Union[_int, 'types.IntWithAggregatesFilter']
    Date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class TransactionGroupByOutput(TypedDict, total=False):
    transactionId: _int
    fcustomerId: _int
    orderPrice: _int
    fbarberId: _int
    Date: datetime.datetime
    _sum: 'TransactionSumAggregateOutput'
    _avg: 'TransactionAvgAggregateOutput'
    _min: 'TransactionMinAggregateOutput'
    _max: 'TransactionMaxAggregateOutput'
    _count: 'TransactionCountAggregateOutput'


class TransactionAvgAggregateOutput(TypedDict, total=False):
    """Transaction output for aggregating averages"""
    transactionId: float
    fcustomerId: float
    orderPrice: float
    fbarberId: float


class TransactionSumAggregateOutput(TypedDict, total=False):
    """Transaction output for aggregating sums"""
    transactionId: _int
    fcustomerId: _int
    orderPrice: _int
    fbarberId: _int


class TransactionScalarAggregateOutput(TypedDict, total=False):
    """Transaction output including scalar fields"""
    transactionId: _int
    fcustomerId: _int
    orderPrice: _int
    fbarberId: _int
    Date: datetime.datetime


TransactionMinAggregateOutput = TransactionScalarAggregateOutput
TransactionMaxAggregateOutput = TransactionScalarAggregateOutput


class TransactionMaxAggregateInput(TypedDict, total=False):
    """Transaction input for aggregating by max"""
    transactionId: bool
    fcustomerId: bool
    orderPrice: bool
    fbarberId: bool
    Date: bool


class TransactionMinAggregateInput(TypedDict, total=False):
    """Transaction input for aggregating by min"""
    transactionId: bool
    fcustomerId: bool
    orderPrice: bool
    fbarberId: bool
    Date: bool


class TransactionNumberAggregateInput(TypedDict, total=False):
    """Transaction input for aggregating numbers"""
    transactionId: bool
    fcustomerId: bool
    orderPrice: bool
    fbarberId: bool


TransactionAvgAggregateInput = TransactionNumberAggregateInput
TransactionSumAggregateInput = TransactionNumberAggregateInput


TransactionCountAggregateInput = TypedDict(
    'TransactionCountAggregateInput',
    {
        'transactionId': bool,
        'fcustomerId': bool,
        'orderPrice': bool,
        'fbarberId': bool,
        'Date': bool,
        '_all': bool,
    },
    total=False,
)

TransactionCountAggregateOutput = TypedDict(
    'TransactionCountAggregateOutput',
    {
        'transactionId': int,
        'fcustomerId': int,
        'orderPrice': int,
        'fbarberId': int,
        'Date': int,
        '_all': int,
    },
    total=False,
)


TransactionKeys = Literal[
    'transactionId',
    'fcustomerId',
    'orderPrice',
    'fbarberId',
    'Date',
]
TransactionScalarFieldKeys = Literal[
    'transactionId',
    'fcustomerId',
    'orderPrice',
    'fbarberId',
    'Date',
]
TransactionScalarFieldKeysT = TypeVar('TransactionScalarFieldKeysT', bound=TransactionScalarFieldKeys)

TransactionRelationalFieldKeys = _NoneType

# Contact types

class ContactOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Contact create method"""
    ContactId: _int


class ContactCreateInput(ContactOptionalCreateInput):
    """Required arguments to the Contact create method"""
    Name: _str
    Email: _str
    Message: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ContactOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Contact create method, without relations"""
    ContactId: _int


class ContactCreateWithoutRelationsInput(ContactOptionalCreateWithoutRelationsInput):
    """Required arguments to the Contact create method, without relations"""
    Name: _str
    Email: _str
    Message: _str


class ContactCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ContactCreateWithoutRelationsInput'
    connect: 'ContactWhereUniqueInput'


class ContactCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ContactCreateWithoutRelationsInput', List['ContactCreateWithoutRelationsInput']]
    connect: Union['ContactWhereUniqueInput', List['ContactWhereUniqueInput']]


_ContactWhereUnique_ContactId_Input = TypedDict(
    '_ContactWhereUnique_ContactId_Input',
    {
        'ContactId': '_int',
    },
    total=True
)

_ContactWhereUnique_Email_Input = TypedDict(
    '_ContactWhereUnique_Email_Input',
    {
        'Email': '_str',
    },
    total=True
)

ContactWhereUniqueInput = Union[
    '_ContactWhereUnique_ContactId_Input',
    '_ContactWhereUnique_Email_Input',
]


class ContactUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    ContactId: Union[AtomicIntInput, _int]
    Name: _str
    Email: _str
    Message: _str


class ContactUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    ContactId: Union[AtomicIntInput, _int]
    Name: _str
    Email: _str
    Message: _str


class ContactUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ContactCreateWithoutRelationsInput']
    connect: List['ContactWhereUniqueInput']
    set: List['ContactWhereUniqueInput']
    disconnect: List['ContactWhereUniqueInput']
    delete: List['ContactWhereUniqueInput']

    # TODO
    # update: List['ContactUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ContactUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ContactScalarWhereInput']
    # upsert: List['ContactUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['ContactCreateOrConnectWithoutRelationsInput']


class ContactUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ContactCreateWithoutRelationsInput'
    connect: 'ContactWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ContactUpdateInput'
    # upsert: 'ContactUpsertWithoutRelationsInput'
    # connectOrCreate: 'ContactCreateOrConnectWithoutRelationsInput'


class ContactUpsertInput(TypedDict):
    create: 'ContactCreateInput'
    update: 'ContactUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Contact_ContactId_OrderByInput = TypedDict(
    '_Contact_ContactId_OrderByInput',
    {
        'ContactId': 'SortOrder',
    },
    total=True
)

_Contact_Name_OrderByInput = TypedDict(
    '_Contact_Name_OrderByInput',
    {
        'Name': 'SortOrder',
    },
    total=True
)

_Contact_Email_OrderByInput = TypedDict(
    '_Contact_Email_OrderByInput',
    {
        'Email': 'SortOrder',
    },
    total=True
)

_Contact_Message_OrderByInput = TypedDict(
    '_Contact_Message_OrderByInput',
    {
        'Message': 'SortOrder',
    },
    total=True
)

ContactOrderByInput = Union[
    '_Contact_ContactId_OrderByInput',
    '_Contact_Name_OrderByInput',
    '_Contact_Email_OrderByInput',
    '_Contact_Message_OrderByInput',
]



# recursive Contact types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ContactRelationFilter = TypedDict(
    'ContactRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ContactListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ContactInclude(TypedDict, total=False):
    """Contact relational arguments"""


    

class AppointmentIncludeFromContact(TypedDict, total=False):
    """Relational arguments for Contact"""


class AppointmentIncludeFromContactRecursive1(TypedDict, total=False):
    """Relational arguments for Contact"""


class AppointmentIncludeFromContactRecursive2(TypedDict, total=False):
    """Relational arguments for Contact"""


class AppointmentIncludeFromContactRecursive3(TypedDict, total=False):
    """Relational arguments for Contact"""


class AppointmentIncludeFromContactRecursive4(TypedDict, total=False):
    """Relational arguments for Contact"""

    

class AppointmentArgsFromContact(TypedDict, total=False):
    """Arguments for Contact"""
    include: 'AppointmentIncludeFromAppointmentRecursive1'


class AppointmentArgsFromContactRecursive1(TypedDict, total=False):
    """Arguments for Contact"""
    include: 'AppointmentIncludeFromAppointmentRecursive2'


class AppointmentArgsFromContactRecursive2(TypedDict, total=False):
    """Arguments for Contact"""
    include: 'AppointmentIncludeFromAppointmentRecursive3'


class AppointmentArgsFromContactRecursive3(TypedDict, total=False):
    """Arguments for Contact"""
    include: 'AppointmentIncludeFromAppointmentRecursive4'


class AppointmentArgsFromContactRecursive4(TypedDict, total=False):
    """Arguments for Contact"""
    
    

class FindManyAppointmentArgsFromContact(TypedDict, total=False):
    """Arguments for Contact"""
    take: int
    skip: int
    order_by: Union['AppointmentOrderByInput', List['AppointmentOrderByInput']]
    where: 'AppointmentWhereInput'
    cursor: 'AppointmentWhereUniqueInput'
    distinct: List['AppointmentScalarFieldKeys']
    include: 'AppointmentIncludeFromAppointmentRecursive1'


class FindManyAppointmentArgsFromContactRecursive1(TypedDict, total=False):
    """Arguments for Contact"""
    take: int
    skip: int
    order_by: Union['AppointmentOrderByInput', List['AppointmentOrderByInput']]
    where: 'AppointmentWhereInput'
    cursor: 'AppointmentWhereUniqueInput'
    distinct: List['AppointmentScalarFieldKeys']
    include: 'AppointmentIncludeFromAppointmentRecursive2'


class FindManyAppointmentArgsFromContactRecursive2(TypedDict, total=False):
    """Arguments for Contact"""
    take: int
    skip: int
    order_by: Union['AppointmentOrderByInput', List['AppointmentOrderByInput']]
    where: 'AppointmentWhereInput'
    cursor: 'AppointmentWhereUniqueInput'
    distinct: List['AppointmentScalarFieldKeys']
    include: 'AppointmentIncludeFromAppointmentRecursive3'


class FindManyAppointmentArgsFromContactRecursive3(TypedDict, total=False):
    """Arguments for Contact"""
    take: int
    skip: int
    order_by: Union['AppointmentOrderByInput', List['AppointmentOrderByInput']]
    where: 'AppointmentWhereInput'
    cursor: 'AppointmentWhereUniqueInput'
    distinct: List['AppointmentScalarFieldKeys']
    include: 'AppointmentIncludeFromAppointmentRecursive4'


class FindManyAppointmentArgsFromContactRecursive4(TypedDict, total=False):
    """Arguments for Contact"""
    take: int
    skip: int
    order_by: Union['AppointmentOrderByInput', List['AppointmentOrderByInput']]
    where: 'AppointmentWhereInput'
    cursor: 'AppointmentWhereUniqueInput'
    distinct: List['AppointmentScalarFieldKeys']
    
    

class BarberIncludeFromContact(TypedDict, total=False):
    """Relational arguments for Contact"""


class BarberIncludeFromContactRecursive1(TypedDict, total=False):
    """Relational arguments for Contact"""


class BarberIncludeFromContactRecursive2(TypedDict, total=False):
    """Relational arguments for Contact"""


class BarberIncludeFromContactRecursive3(TypedDict, total=False):
    """Relational arguments for Contact"""


class BarberIncludeFromContactRecursive4(TypedDict, total=False):
    """Relational arguments for Contact"""

    

class BarberArgsFromContact(TypedDict, total=False):
    """Arguments for Contact"""
    include: 'BarberIncludeFromBarberRecursive1'


class BarberArgsFromContactRecursive1(TypedDict, total=False):
    """Arguments for Contact"""
    include: 'BarberIncludeFromBarberRecursive2'


class BarberArgsFromContactRecursive2(TypedDict, total=False):
    """Arguments for Contact"""
    include: 'BarberIncludeFromBarberRecursive3'


class BarberArgsFromContactRecursive3(TypedDict, total=False):
    """Arguments for Contact"""
    include: 'BarberIncludeFromBarberRecursive4'


class BarberArgsFromContactRecursive4(TypedDict, total=False):
    """Arguments for Contact"""
    
    

class FindManyBarberArgsFromContact(TypedDict, total=False):
    """Arguments for Contact"""
    take: int
    skip: int
    order_by: Union['BarberOrderByInput', List['BarberOrderByInput']]
    where: 'BarberWhereInput'
    cursor: 'BarberWhereUniqueInput'
    distinct: List['BarberScalarFieldKeys']
    include: 'BarberIncludeFromBarberRecursive1'


class FindManyBarberArgsFromContactRecursive1(TypedDict, total=False):
    """Arguments for Contact"""
    take: int
    skip: int
    order_by: Union['BarberOrderByInput', List['BarberOrderByInput']]
    where: 'BarberWhereInput'
    cursor: 'BarberWhereUniqueInput'
    distinct: List['BarberScalarFieldKeys']
    include: 'BarberIncludeFromBarberRecursive2'


class FindManyBarberArgsFromContactRecursive2(TypedDict, total=False):
    """Arguments for Contact"""
    take: int
    skip: int
    order_by: Union['BarberOrderByInput', List['BarberOrderByInput']]
    where: 'BarberWhereInput'
    cursor: 'BarberWhereUniqueInput'
    distinct: List['BarberScalarFieldKeys']
    include: 'BarberIncludeFromBarberRecursive3'


class FindManyBarberArgsFromContactRecursive3(TypedDict, total=False):
    """Arguments for Contact"""
    take: int
    skip: int
    order_by: Union['BarberOrderByInput', List['BarberOrderByInput']]
    where: 'BarberWhereInput'
    cursor: 'BarberWhereUniqueInput'
    distinct: List['BarberScalarFieldKeys']
    include: 'BarberIncludeFromBarberRecursive4'


class FindManyBarberArgsFromContactRecursive4(TypedDict, total=False):
    """Arguments for Contact"""
    take: int
    skip: int
    order_by: Union['BarberOrderByInput', List['BarberOrderByInput']]
    where: 'BarberWhereInput'
    cursor: 'BarberWhereUniqueInput'
    distinct: List['BarberScalarFieldKeys']
    
    

class CustomerIncludeFromContact(TypedDict, total=False):
    """Relational arguments for Contact"""


class CustomerIncludeFromContactRecursive1(TypedDict, total=False):
    """Relational arguments for Contact"""


class CustomerIncludeFromContactRecursive2(TypedDict, total=False):
    """Relational arguments for Contact"""


class CustomerIncludeFromContactRecursive3(TypedDict, total=False):
    """Relational arguments for Contact"""


class CustomerIncludeFromContactRecursive4(TypedDict, total=False):
    """Relational arguments for Contact"""

    

class CustomerArgsFromContact(TypedDict, total=False):
    """Arguments for Contact"""
    include: 'CustomerIncludeFromCustomerRecursive1'


class CustomerArgsFromContactRecursive1(TypedDict, total=False):
    """Arguments for Contact"""
    include: 'CustomerIncludeFromCustomerRecursive2'


class CustomerArgsFromContactRecursive2(TypedDict, total=False):
    """Arguments for Contact"""
    include: 'CustomerIncludeFromCustomerRecursive3'


class CustomerArgsFromContactRecursive3(TypedDict, total=False):
    """Arguments for Contact"""
    include: 'CustomerIncludeFromCustomerRecursive4'


class CustomerArgsFromContactRecursive4(TypedDict, total=False):
    """Arguments for Contact"""
    
    

class FindManyCustomerArgsFromContact(TypedDict, total=False):
    """Arguments for Contact"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive1'


class FindManyCustomerArgsFromContactRecursive1(TypedDict, total=False):
    """Arguments for Contact"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive2'


class FindManyCustomerArgsFromContactRecursive2(TypedDict, total=False):
    """Arguments for Contact"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive3'


class FindManyCustomerArgsFromContactRecursive3(TypedDict, total=False):
    """Arguments for Contact"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    include: 'CustomerIncludeFromCustomerRecursive4'


class FindManyCustomerArgsFromContactRecursive4(TypedDict, total=False):
    """Arguments for Contact"""
    take: int
    skip: int
    order_by: Union['CustomerOrderByInput', List['CustomerOrderByInput']]
    where: 'CustomerWhereInput'
    cursor: 'CustomerWhereUniqueInput'
    distinct: List['CustomerScalarFieldKeys']
    
    

class TransactionIncludeFromContact(TypedDict, total=False):
    """Relational arguments for Contact"""


class TransactionIncludeFromContactRecursive1(TypedDict, total=False):
    """Relational arguments for Contact"""


class TransactionIncludeFromContactRecursive2(TypedDict, total=False):
    """Relational arguments for Contact"""


class TransactionIncludeFromContactRecursive3(TypedDict, total=False):
    """Relational arguments for Contact"""


class TransactionIncludeFromContactRecursive4(TypedDict, total=False):
    """Relational arguments for Contact"""

    

class TransactionArgsFromContact(TypedDict, total=False):
    """Arguments for Contact"""
    include: 'TransactionIncludeFromTransactionRecursive1'


class TransactionArgsFromContactRecursive1(TypedDict, total=False):
    """Arguments for Contact"""
    include: 'TransactionIncludeFromTransactionRecursive2'


class TransactionArgsFromContactRecursive2(TypedDict, total=False):
    """Arguments for Contact"""
    include: 'TransactionIncludeFromTransactionRecursive3'


class TransactionArgsFromContactRecursive3(TypedDict, total=False):
    """Arguments for Contact"""
    include: 'TransactionIncludeFromTransactionRecursive4'


class TransactionArgsFromContactRecursive4(TypedDict, total=False):
    """Arguments for Contact"""
    
    

class FindManyTransactionArgsFromContact(TypedDict, total=False):
    """Arguments for Contact"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive1'


class FindManyTransactionArgsFromContactRecursive1(TypedDict, total=False):
    """Arguments for Contact"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive2'


class FindManyTransactionArgsFromContactRecursive2(TypedDict, total=False):
    """Arguments for Contact"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive3'


class FindManyTransactionArgsFromContactRecursive3(TypedDict, total=False):
    """Arguments for Contact"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive4'


class FindManyTransactionArgsFromContactRecursive4(TypedDict, total=False):
    """Arguments for Contact"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    
    

class ContactIncludeFromContact(TypedDict, total=False):
    """Relational arguments for Contact"""


class ContactIncludeFromContactRecursive1(TypedDict, total=False):
    """Relational arguments for Contact"""


class ContactIncludeFromContactRecursive2(TypedDict, total=False):
    """Relational arguments for Contact"""


class ContactIncludeFromContactRecursive3(TypedDict, total=False):
    """Relational arguments for Contact"""


class ContactIncludeFromContactRecursive4(TypedDict, total=False):
    """Relational arguments for Contact"""

    

class ContactArgsFromContact(TypedDict, total=False):
    """Arguments for Contact"""
    include: 'ContactIncludeFromContactRecursive1'


class ContactArgsFromContactRecursive1(TypedDict, total=False):
    """Arguments for Contact"""
    include: 'ContactIncludeFromContactRecursive2'


class ContactArgsFromContactRecursive2(TypedDict, total=False):
    """Arguments for Contact"""
    include: 'ContactIncludeFromContactRecursive3'


class ContactArgsFromContactRecursive3(TypedDict, total=False):
    """Arguments for Contact"""
    include: 'ContactIncludeFromContactRecursive4'


class ContactArgsFromContactRecursive4(TypedDict, total=False):
    """Arguments for Contact"""
    
    

class FindManyContactArgsFromContact(TypedDict, total=False):
    """Arguments for Contact"""
    take: int
    skip: int
    order_by: Union['ContactOrderByInput', List['ContactOrderByInput']]
    where: 'ContactWhereInput'
    cursor: 'ContactWhereUniqueInput'
    distinct: List['ContactScalarFieldKeys']
    include: 'ContactIncludeFromContactRecursive1'


class FindManyContactArgsFromContactRecursive1(TypedDict, total=False):
    """Arguments for Contact"""
    take: int
    skip: int
    order_by: Union['ContactOrderByInput', List['ContactOrderByInput']]
    where: 'ContactWhereInput'
    cursor: 'ContactWhereUniqueInput'
    distinct: List['ContactScalarFieldKeys']
    include: 'ContactIncludeFromContactRecursive2'


class FindManyContactArgsFromContactRecursive2(TypedDict, total=False):
    """Arguments for Contact"""
    take: int
    skip: int
    order_by: Union['ContactOrderByInput', List['ContactOrderByInput']]
    where: 'ContactWhereInput'
    cursor: 'ContactWhereUniqueInput'
    distinct: List['ContactScalarFieldKeys']
    include: 'ContactIncludeFromContactRecursive3'


class FindManyContactArgsFromContactRecursive3(TypedDict, total=False):
    """Arguments for Contact"""
    take: int
    skip: int
    order_by: Union['ContactOrderByInput', List['ContactOrderByInput']]
    where: 'ContactWhereInput'
    cursor: 'ContactWhereUniqueInput'
    distinct: List['ContactScalarFieldKeys']
    include: 'ContactIncludeFromContactRecursive4'


class FindManyContactArgsFromContactRecursive4(TypedDict, total=False):
    """Arguments for Contact"""
    take: int
    skip: int
    order_by: Union['ContactOrderByInput', List['ContactOrderByInput']]
    where: 'ContactWhereInput'
    cursor: 'ContactWhereUniqueInput'
    distinct: List['ContactScalarFieldKeys']
    


FindManyContactArgs = FindManyContactArgsFromContact
FindFirstContactArgs = FindManyContactArgsFromContact


    

class ContactWhereInput(TypedDict, total=False):
    """Contact arguments for searching"""
    ContactId: Union[_int, 'types.IntFilter']
    Name: Union[_str, 'types.StringFilter']
    Email: Union[_str, 'types.StringFilter']
    Message: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ContactWhereInputRecursive1', List['ContactWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ContactWhereInputRecursive1']
    OR: List['ContactWhereInputRecursive1']
    NOT: List['ContactWhereInputRecursive1']


class ContactWhereInputRecursive1(TypedDict, total=False):
    """Contact arguments for searching"""
    ContactId: Union[_int, 'types.IntFilter']
    Name: Union[_str, 'types.StringFilter']
    Email: Union[_str, 'types.StringFilter']
    Message: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ContactWhereInputRecursive2', List['ContactWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ContactWhereInputRecursive2']
    OR: List['ContactWhereInputRecursive2']
    NOT: List['ContactWhereInputRecursive2']


class ContactWhereInputRecursive2(TypedDict, total=False):
    """Contact arguments for searching"""
    ContactId: Union[_int, 'types.IntFilter']
    Name: Union[_str, 'types.StringFilter']
    Email: Union[_str, 'types.StringFilter']
    Message: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ContactWhereInputRecursive3', List['ContactWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ContactWhereInputRecursive3']
    OR: List['ContactWhereInputRecursive3']
    NOT: List['ContactWhereInputRecursive3']


class ContactWhereInputRecursive3(TypedDict, total=False):
    """Contact arguments for searching"""
    ContactId: Union[_int, 'types.IntFilter']
    Name: Union[_str, 'types.StringFilter']
    Email: Union[_str, 'types.StringFilter']
    Message: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['ContactWhereInputRecursive4', List['ContactWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ContactWhereInputRecursive4']
    OR: List['ContactWhereInputRecursive4']
    NOT: List['ContactWhereInputRecursive4']


class ContactWhereInputRecursive4(TypedDict, total=False):
    """Contact arguments for searching"""
    ContactId: Union[_int, 'types.IntFilter']
    Name: Union[_str, 'types.StringFilter']
    Email: Union[_str, 'types.StringFilter']
    Message: Union[_str, 'types.StringFilter']



# aggregate Contact types


    

class ContactScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Contact arguments for searching"""
    ContactId: Union[_int, 'types.IntWithAggregatesFilter']
    Name: Union[_str, 'types.StringWithAggregatesFilter']
    Email: Union[_str, 'types.StringWithAggregatesFilter']
    Message: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ContactScalarWhereWithAggregatesInputRecursive1']
    OR: List['ContactScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ContactScalarWhereWithAggregatesInputRecursive1']


class ContactScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Contact arguments for searching"""
    ContactId: Union[_int, 'types.IntWithAggregatesFilter']
    Name: Union[_str, 'types.StringWithAggregatesFilter']
    Email: Union[_str, 'types.StringWithAggregatesFilter']
    Message: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ContactScalarWhereWithAggregatesInputRecursive2']
    OR: List['ContactScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ContactScalarWhereWithAggregatesInputRecursive2']


class ContactScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Contact arguments for searching"""
    ContactId: Union[_int, 'types.IntWithAggregatesFilter']
    Name: Union[_str, 'types.StringWithAggregatesFilter']
    Email: Union[_str, 'types.StringWithAggregatesFilter']
    Message: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ContactScalarWhereWithAggregatesInputRecursive3']
    OR: List['ContactScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ContactScalarWhereWithAggregatesInputRecursive3']


class ContactScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Contact arguments for searching"""
    ContactId: Union[_int, 'types.IntWithAggregatesFilter']
    Name: Union[_str, 'types.StringWithAggregatesFilter']
    Email: Union[_str, 'types.StringWithAggregatesFilter']
    Message: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ContactScalarWhereWithAggregatesInputRecursive4']
    OR: List['ContactScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ContactScalarWhereWithAggregatesInputRecursive4']


class ContactScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Contact arguments for searching"""
    ContactId: Union[_int, 'types.IntWithAggregatesFilter']
    Name: Union[_str, 'types.StringWithAggregatesFilter']
    Email: Union[_str, 'types.StringWithAggregatesFilter']
    Message: Union[_str, 'types.StringWithAggregatesFilter']



class ContactGroupByOutput(TypedDict, total=False):
    ContactId: _int
    Name: _str
    Email: _str
    Message: _str
    _sum: 'ContactSumAggregateOutput'
    _avg: 'ContactAvgAggregateOutput'
    _min: 'ContactMinAggregateOutput'
    _max: 'ContactMaxAggregateOutput'
    _count: 'ContactCountAggregateOutput'


class ContactAvgAggregateOutput(TypedDict, total=False):
    """Contact output for aggregating averages"""
    ContactId: float


class ContactSumAggregateOutput(TypedDict, total=False):
    """Contact output for aggregating sums"""
    ContactId: _int


class ContactScalarAggregateOutput(TypedDict, total=False):
    """Contact output including scalar fields"""
    ContactId: _int
    Name: _str
    Email: _str
    Message: _str


ContactMinAggregateOutput = ContactScalarAggregateOutput
ContactMaxAggregateOutput = ContactScalarAggregateOutput


class ContactMaxAggregateInput(TypedDict, total=False):
    """Contact input for aggregating by max"""
    ContactId: bool
    Name: bool
    Email: bool
    Message: bool


class ContactMinAggregateInput(TypedDict, total=False):
    """Contact input for aggregating by min"""
    ContactId: bool
    Name: bool
    Email: bool
    Message: bool


class ContactNumberAggregateInput(TypedDict, total=False):
    """Contact input for aggregating numbers"""
    ContactId: bool


ContactAvgAggregateInput = ContactNumberAggregateInput
ContactSumAggregateInput = ContactNumberAggregateInput


ContactCountAggregateInput = TypedDict(
    'ContactCountAggregateInput',
    {
        'ContactId': bool,
        'Name': bool,
        'Email': bool,
        'Message': bool,
        '_all': bool,
    },
    total=False,
)

ContactCountAggregateOutput = TypedDict(
    'ContactCountAggregateOutput',
    {
        'ContactId': int,
        'Name': int,
        'Email': int,
        'Message': int,
        '_all': int,
    },
    total=False,
)


ContactKeys = Literal[
    'ContactId',
    'Name',
    'Email',
    'Message',
]
ContactScalarFieldKeys = Literal[
    'ContactId',
    'Name',
    'Email',
    'Message',
]
ContactScalarFieldKeysT = TypeVar('ContactScalarFieldKeysT', bound=ContactScalarFieldKeys)

ContactRelationalFieldKeys = _NoneType



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields